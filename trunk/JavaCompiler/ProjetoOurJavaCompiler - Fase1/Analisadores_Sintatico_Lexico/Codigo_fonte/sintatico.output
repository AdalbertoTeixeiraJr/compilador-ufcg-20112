State 9 conflicts: 9 shift/reduce
State 73 conflicts: 24 shift/reduce
State 77 conflicts: 1 shift/reduce
State 110 conflicts: 1 shift/reduce
State 131 conflicts: 1 shift/reduce
State 132 conflicts: 1 shift/reduce
State 133 conflicts: 1 shift/reduce
State 134 conflicts: 1 shift/reduce
State 135 conflicts: 1 shift/reduce
State 136 conflicts: 1 shift/reduce
State 137 conflicts: 1 shift/reduce
State 138 conflicts: 1 shift/reduce
State 139 conflicts: 1 shift/reduce
State 146 conflicts: 27 reduce/reduce
State 147 conflicts: 24 shift/reduce
State 148 conflicts: 9 shift/reduce
State 175 conflicts: 1 shift/reduce, 1 reduce/reduce
State 198 conflicts: 1 shift/reduce
State 257 conflicts: 1 shift/reduce
State 262 conflicts: 1 shift/reduce, 3 reduce/reduce
State 264 conflicts: 3 reduce/reduce
State 277 conflicts: 6 reduce/reduce
State 314 conflicts: 1 shift/reduce
State 337 conflicts: 2 shift/reduce, 3 reduce/reduce
State 378 conflicts: 1 shift/reduce
State 399 conflicts: 2 shift/reduce, 3 reduce/reduce
State 400 conflicts: 24 shift/reduce
State 402 conflicts: 2 shift/reduce
State 425 conflicts: 3 reduce/reduce
State 426 conflicts: 2 shift/reduce, 3 reduce/reduce
State 428 conflicts: 27 reduce/reduce
State 429 conflicts: 2 shift/reduce


Grammar

    0 $accept: compilation_unit $end

    1 compilation_unit: class_declaration

    2 class_declaration: CLASS identifier class_body

    3 identifier: ID

    4 class_body: BEG class_body_declaration END

    5 class_body_declaration: class_member_declaration_opt static_initializer class_member_declaration_opt

    6 static_initializer: PUBLIC STATIC VOID MAIN OPEN_PAREN TYPE_STRING OPEN_COLC CLOSE_COLC ARGS CLOSE_PAREN block

    7 block: BEG block_statements END

    8 block_statements: block_statement block_statements_
    9                 | block_statements_

   10 block_statements_: block_statement block_statements_
   11                  | /* empty */

   12 block_statement: local_variable_declaration_statement
   13                | statement

   14 local_variable_declaration_statement: local_variable_declaration PT_VIRGULA local_variable_declaration_

   15 local_variable_declaration_: local_variable_declaration PT_VIRGULA
   16                            | /* empty */

   17 local_variable_declaration: primitive_type variable_declarators
   18                           | primitive_type OPEN_COLC CLOSE_COLC variable_declarators

   19 primitive_type: numeric_type
   20               | TYPE_BOOL
   21               | TYPE_STRING

   22 numeric_type: integral_type
   23             | floating_point_type

   24 integral_type: TYPE_BYTE
   25              | TYPE_SHORT
   26              | TYPE_INT
   27              | TYPE_LONG
   28              | TYPE_CHAR

   29 floating_point_type: TYPE_FLOAT
   30                    | TYPE_DOUBLE

   31 variable_declarators: variable_declarator variable_declarators_

   32 variable_declarator: variable_declarator_id variable_declarator_

   33 variable_declarators_: VIRGULA variable_declarator variable_declarators_
   34                      | /* empty */

   35 variable_declarator_: EQUAL variable_initializer
   36                     | /* empty */

   37 variable_declarator_id: identifier

   38 variable_initializer: assignment_expression
   39                     | array_initializer
   40                     | left_hand_side

   41 array_initializer: BEG variable_initializers virgula_opt END
   42                  | array_creation_expression

   43 virgula_opt: VIRGULA
   44            | /* empty */

   45 variable_initializers: variable_initializer variable_initializers_
   46                      | variable_initializers_

   47 variable_initializers_: VIRGULA variable_initializer variable_initializers_
   48                       | /* empty */

   49 expression: assignment_expression

   50 assignment_expression: conditional_expression

   51 field_access: identifier POINT identifier

   52 left_hand_side: field_access
   53               | array_access

   54 assignment_operator: EQUAL
   55                    | ARITH_ASSIGN
   56                    | SHIFT_ASSIGN
   57                    | LOGIC_ASSIGN

   58 array_access: primary_no_new_array OPEN_COLC expression CLOSE_COLC

   59 primary_no_new_array: LITERAL
   60                     | field_access
   61                     | method_invocation
   62                     | array_access
   63                     | identifier

   64 argument_list: expression argument_list_
   65              | argument_list_

   66 argument_list_: VIRGULA expression argument_list_
   67               | /* empty */

   68 array_creation_expression: NEW primitive_type dim_exprs dims

   69 dim_exprs: OPEN_COLC dim_expr_or_empty CLOSE_COLC

   70 dim_expr_or_empty: expression
   71                  | /* empty */

   72 dims: dim_exprs
   73     | /* empty */

   74 conditional_expression: conditional_or_expression
   75                       | OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression

   78 conditional_opt: conditional_or_expression_
   79                | conditional_and_expression_
   80                | inclusive_or_expression_
   81                | exclusive_or_expression_
   82                | and_expression_
   83                | equality_expression_
   84                | relational_expression_
   85                | shift_expression_
   86                | additive_expression_
   87                | multiplicative_expression_
   88                | /* empty */

   89 conditional_or_expression: conditional_and_expression conditional_or_expression_
   90                          | conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN

   91 conditional_or_expression_: OR_LOGIC conditional_and_expression conditional_or_expression_
   92                           | /* empty */

   93 conditional_and_expression: inclusive_or_expression conditional_and_expression_
   94                           | inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN

   95 conditional_and_expression_: AND_LOGIC inclusive_or_expression conditional_and_expression_
   96                            | /* empty */

   97 inclusive_or_expression: exclusive_or_expression inclusive_or_expression_
   98                        | exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN

   99 inclusive_or_expression_: OR exclusive_or_expression inclusive_or_expression_
  100                         | /* empty */

  101 exclusive_or_expression: and_expression exclusive_or_expression_
  102                        | and_expression OPEN_PAREN conditional_expression CLOSE_PAREN

  103 exclusive_or_expression_: OR_EXC and_expression exclusive_or_expression_
  104                         | /* empty */

  105 and_expression: equality_expression and_expression_
  106               | equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN

  107 and_expression_: AND equality_expression and_expression_
  108                | /* empty */

  109 equality_expression: relational_expression equality_expression_
  110                    | relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN

  111 equality_expression_: EQUALOP relational_expression equality_expression_
  112                     | /* empty */

  113 relational_expression: shift_expression relational_expression_
  114                      | shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN

  115 relational_expression_: RELOP shift_expression relational_expression_
  116                       | /* empty */

  117 shift_expression: additive_expression shift_expression_
  118                 | additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN

  119 shift_expression_: SHIFTS additive_expression shift_expression_
  120                  | /* empty */

  121 additive_expression: multiplicative_expression additive_expression_
  122                    | multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN

  123 additive_expression_: PLUS multiplicative_expression additive_expression_
  124                     | MINUS multiplicative_expression additive_expression_
  125                     | /* empty */

  126 multiplicative_expression: unary_expression multiplicative_expression_
  127                          | unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN

  128 multiplicative_expression_: MULT unary_expression multiplicative_expression_
  129                           | DIV unary_expression multiplicative_expression_
  130                           | MOD unary_expression multiplicative_expression_
  131                           | /* empty */

  132 unary_expression: INCREMENT unary_expression
  133                 | DECREMENT unary_expression
  134                 | PLUS unary_expression
  135                 | MINUS unary_expression
  136                 | postfix_expression
  137                 | NOT unary_expression
  138                 | NOT_BIT unary_expression
  139                 | cast_expression
  140                 | OPEN_PAREN conditional_expression CLOSE_PAREN

  141 cast_expression: OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus

  143 reference_type: class_type
  144               | array_type

  145 class_type: identifier

  146 array_type: primitive_type OPEN_COLC CLOSE_COLC

  147 unary_expression_not_plus_minus: postfix_expression
  148                                | NOT_BIT unary_expression
  149                                | NOT unary_expression
  150                                | cast_expression

  151 postfix_expression: primary_no_new_array postfix_expression_

  152 postfix_expression_: INCREMENT postfix_expression_
  153                    | DECREMENT postfix_expression_
  154                    | /* empty */

  155 statement: statement_without_trailing_substatement
  156          | identifier TWO_POINTS statement
  157          | IF OPEN_PAREN expression CLOSE_PAREN optional_else
  158          | WHILE OPEN_PAREN expression CLOSE_PAREN statement
  159          | FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement

  160 optional_else: statement
  161              | statement_no_short_if ELSE statement

  162 for_init: statement_expression_list
  163         | local_variable_declaration
  164         | /* empty */

  165 statement_expression_list: statement_expression statement_expression_list_

  166 statement_expression_list_: VIRGULA statement_expression statement_expression_list_
  167                           | /* empty */

  168 statement_expression: primary_no_new_array assignment_operator assignment_expression
  169                     | preincrement_expression
  170                     | post_incr_decrement_expression
  171                     | predecrement_expression

  172 preincrement_expression: INCREMENT unary_expression

  173 post_incr_decrement_expression: postfix_expression

  174 predecrement_expression: DECREMENT unary_expression

  175 method_invocation: identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

  178 expression_opt: expression
  179               | /* empty */

  180 for_update: statement_expression_list

  181 for_update_opt: for_update
  182               | /* empty */

  183 statement_without_trailing_substatement: block
  184                                        | empty_statement
  185                                        | expression_statement
  186                                        | switch_statement
  187                                        | do_statement
  188                                        | break_statement
  189                                        | continue_statement
  190                                        | goto_statement
  191                                        | return_statement

  192 empty_statement: PT_VIRGULA

  193 expression_statement: statement_expression PT_VIRGULA

  194 switch_statement: SWITCH OPEN_PAREN expression CLOSE_PAREN switch_block

  195 switch_block: BEG switch_block_statement_groups switch_labels END

  196 switch_block_statement_groups: switch_block_statement_group switch_block_statement_groups_
  197                              | switch_block_statement_groups_

  198 switch_block_statement_groups_: switch_block_statement_group switch_block_statement_groups_
  199                               | /* empty */

  200 switch_block_statement_group: switch_labels block_statements

  201 switch_labels: switch_label switch_labels_
  202              | switch_labels_

  203 switch_labels_: switch_label switch_labels_
  204               | /* empty */

  205 switch_label: CASE expression TWO_POINTS
  206             | DEFAULT TWO_POINTS

  207 do_statement: DO statement WHILE OPEN_PAREN expression CLOSE_PAREN PT_VIRGULA

  208 break_statement: BREAK identifier_opt PT_VIRGULA

  209 continue_statement: CONTINUE identifier_opt PT_VIRGULA

  210 goto_statement: GOTO identifier_opt PT_VIRGULA

  211 return_statement: RETURN expression_opt PT_VIRGULA

  212 identifier_opt: identifier
  213               | /* empty */

  214 statement_no_short_if: statement_without_trailing_substatement
  215                      | identifier TWO_POINTS statement_no_short_if
  216                      | IF OPEN_PAREN expression CLOSE_PAREN statement_no_short_if ELSE statement_no_short_if
  217                      | WHILE OPEN_PAREN expression CLOSE_PAREN statement_no_short_if
  218                      | FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement_no_short_if

  219 class_member_declaration_opt: class_member_declaration class_member_declaration_
  220                             | /* empty */

  221 class_member_declaration_: class_member_declaration class_member_declaration_
  222                          | /* empty */

  223 class_member_declaration: STATIC field_or_method_declaration

  224 field_or_method_declaration: field_declaration
  225                            | method_declaration

  226 method_declaration: method_header method_body

  227 method_header: result_type method_declarator

  228 result_type: primitive_type
  229            | array_type
  230            | VOID

  231 method_declarator: identifier OPEN_PAREN formal_parameter_list CLOSE_PAREN

  232 method_body: block
  233            | PT_VIRGULA
  234            | /* empty */

  235 formal_parameter_list: formal_parameter formal_parameter_list_
  236                      | formal_parameter_list_

  237 formal_parameter_list_: VIRGULA formal_parameter formal_parameter_list_
  238                       | /* empty */

  239 formal_parameter: primitive_type variable_declarator_id
  240                 | array_type variable_declarator_id

  241 field_declaration: field_modifiers_ primitive_type variable_declarators PT_VIRGULA
  242                  | field_modifiers_ primitive_type OPEN_COLC CLOSE_COLC variable_declarators PT_VIRGULA

  243 field_modifiers_: field_modifier field_modifiers_
  244                 | /* empty */

  245 field_modifier: FINAL
  246               | TRANSIENT
  247               | VOLATILE


Terminals, with rules where they appear

$end (0) 0
error (256)
CLASS (258) 2
BEG (259) 4 7 41 195
END (260) 4 7 41 195
STATIC (261) 6 223
PT_VIRGULA (262) 14 15 159 192 193 207 208 209 210 211 218 233 241
    242
OPEN_COLC (263) 6 18 58 69 146 242
CLOSE_COLC (264) 6 18 58 69 146 242
EQUAL (265) 35 54
VIRGULA (266) 33 43 47 66 166 237
POINT (267) 51 177
QUESTION_MARK (268) 76 77
TWO_POINTS (269) 76 77 156 205 206 215
OR_LOGIC (270) 91
AND_LOGIC (271) 95
OPEN_PAREN (272) 6 75 77 90 94 98 102 106 110 114 118 122 127 140 141
    142 157 158 159 175 176 177 194 207 216 217 218 231
CLOSE_PAREN (273) 6 75 77 90 94 98 102 106 110 114 118 122 127 140
    141 142 157 158 159 175 176 177 194 207 216 217 218 231
NEW (274) 68
OR (275) 99
OR_EXC (276) 103
AND (277) 107
PLUS (278) 123 134
MINUS (279) 124 135
MULT (280) 128
DIV (281) 129
MOD (282) 130
INCREMENT (283) 132 152 172
DECREMENT (284) 133 153 174
NOT (285) 137 149
NOT_BIT (286) 138 148
FOR (287) 159 218
IF (288) 157 216
ELSE (289) 161 216
WHILE (290) 158 207 217
CASE (291) 205
SWITCH (292) 194
DEFAULT (293) 206
DO (294) 207
BREAK (295) 208
CONTINUE (296) 209
GOTO (297) 210
RETURN (298) 211
VOID (299) 6 230
MAIN (300) 6
ARGS (301) 6
PUBLIC (302) 6
TYPE_INT (303) 26
TYPE_SHORT (304) 25
TYPE_LONG (305) 27
TYPE_BYTE (306) 24
TYPE_BOOL (307) 20
TYPE_FLOAT (308) 29
TYPE_DOUBLE (309) 30
TYPE_CHAR (310) 28
TYPE_STRING (311) 6 21
FINAL (312) 245
TRANSIENT (313) 246
VOLATILE (314) 247
ID (315) 3
SHIFT_ASSIGN (316) 56
ARITH_ASSIGN (317) 55
LOGIC_ASSIGN (318) 57
LITERAL (319) 59 177
EQUALOP (320) 111
RELOP (321) 115
SHIFTS (322) 119


Nonterminals, with rules where they appear

$accept (68)
    on left: 0
compilation_unit (69)
    on left: 1, on right: 0
class_declaration (70)
    on left: 2, on right: 1
identifier (71)
    on left: 3, on right: 2 37 51 63 145 156 175 177 212 215 231
class_body (72)
    on left: 4, on right: 2
class_body_declaration (73)
    on left: 5, on right: 4
static_initializer (74)
    on left: 6, on right: 5
block (75)
    on left: 7, on right: 6 183 232
block_statements (76)
    on left: 8 9, on right: 7 200
block_statements_ (77)
    on left: 10 11, on right: 8 9 10
block_statement (78)
    on left: 12 13, on right: 8 10
local_variable_declaration_statement (79)
    on left: 14, on right: 12
local_variable_declaration_ (80)
    on left: 15 16, on right: 14
local_variable_declaration (81)
    on left: 17 18, on right: 14 15 163
primitive_type (82)
    on left: 19 20 21, on right: 17 18 68 141 146 228 239 241 242
numeric_type (83)
    on left: 22 23, on right: 19
integral_type (84)
    on left: 24 25 26 27 28, on right: 22
floating_point_type (85)
    on left: 29 30, on right: 23
variable_declarators (86)
    on left: 31, on right: 17 18 241 242
variable_declarator (87)
    on left: 32, on right: 31 33
variable_declarators_ (88)
    on left: 33 34, on right: 31 33
variable_declarator_ (89)
    on left: 35 36, on right: 32
variable_declarator_id (90)
    on left: 37, on right: 32 239 240
variable_initializer (91)
    on left: 38 39 40, on right: 35 45 47
array_initializer (92)
    on left: 41 42, on right: 39
virgula_opt (93)
    on left: 43 44, on right: 41
variable_initializers (94)
    on left: 45 46, on right: 41
variable_initializers_ (95)
    on left: 47 48, on right: 45 46 47
expression (96)
    on left: 49, on right: 58 64 66 70 157 158 178 194 205 207 216
    217
assignment_expression (97)
    on left: 50, on right: 38 49 168
field_access (98)
    on left: 51, on right: 52 60 176
left_hand_side (99)
    on left: 52 53, on right: 40
assignment_operator (100)
    on left: 54 55 56 57, on right: 168
array_access (101)
    on left: 58, on right: 53 62
primary_no_new_array (102)
    on left: 59 60 61 62 63, on right: 58 151 168
argument_list (103)
    on left: 64 65, on right: 175 176 177
argument_list_ (104)
    on left: 66 67, on right: 64 65 66
array_creation_expression (105)
    on left: 68, on right: 42
dim_exprs (106)
    on left: 69, on right: 68 72
dim_expr_or_empty (107)
    on left: 70 71, on right: 69
dims (108)
    on left: 72 73, on right: 68
conditional_expression (109)
    on left: 74 75 76 77, on right: 50 76 77 90 94 98 102 106 110 114
    118 122 127 140
conditional_opt (110)
    on left: 78 79 80 81 82 83 84 85 86 87 88, on right: 75
conditional_or_expression (111)
    on left: 89 90, on right: 74 75 76 77
conditional_or_expression_ (112)
    on left: 91 92, on right: 78 89 91
conditional_and_expression (113)
    on left: 93 94, on right: 89 90 91
conditional_and_expression_ (114)
    on left: 95 96, on right: 79 93 95
inclusive_or_expression (115)
    on left: 97 98, on right: 93 94 95
inclusive_or_expression_ (116)
    on left: 99 100, on right: 80 97 99
exclusive_or_expression (117)
    on left: 101 102, on right: 97 98 99
exclusive_or_expression_ (118)
    on left: 103 104, on right: 81 101 103
and_expression (119)
    on left: 105 106, on right: 101 102 103
and_expression_ (120)
    on left: 107 108, on right: 82 105 107
equality_expression (121)
    on left: 109 110, on right: 105 106 107
equality_expression_ (122)
    on left: 111 112, on right: 83 109 111
relational_expression (123)
    on left: 113 114, on right: 109 110 111
relational_expression_ (124)
    on left: 115 116, on right: 84 113 115
shift_expression (125)
    on left: 117 118, on right: 113 114 115
shift_expression_ (126)
    on left: 119 120, on right: 85 117 119
additive_expression (127)
    on left: 121 122, on right: 117 118 119
additive_expression_ (128)
    on left: 123 124 125, on right: 86 121 123 124
multiplicative_expression (129)
    on left: 126 127, on right: 121 122 123 124
multiplicative_expression_ (130)
    on left: 128 129 130 131, on right: 87 126 128 129 130
unary_expression (131)
    on left: 132 133 134 135 136 137 138 139 140, on right: 126 127
    128 129 130 132 133 134 135 137 138 141 148 149 172 174
cast_expression (132)
    on left: 141 142, on right: 139 150
reference_type (133)
    on left: 143 144, on right: 142
class_type (134)
    on left: 145, on right: 143
array_type (135)
    on left: 146, on right: 144 229 240
unary_expression_not_plus_minus (136)
    on left: 147 148 149 150, on right: 142
postfix_expression (137)
    on left: 151, on right: 136 147 173
postfix_expression_ (138)
    on left: 152 153 154, on right: 151 152 153
statement (139)
    on left: 155 156 157 158 159, on right: 13 156 158 159 160 161
    207
optional_else (140)
    on left: 160 161, on right: 157
for_init (141)
    on left: 162 163 164, on right: 159 218
statement_expression_list (142)
    on left: 165, on right: 162 180
statement_expression_list_ (143)
    on left: 166 167, on right: 165 166
statement_expression (144)
    on left: 168 169 170 171, on right: 165 166 193
preincrement_expression (145)
    on left: 172, on right: 169
post_incr_decrement_expression (146)
    on left: 173, on right: 170
predecrement_expression (147)
    on left: 174, on right: 171
method_invocation (148)
    on left: 175 176 177, on right: 61
expression_opt (149)
    on left: 178 179, on right: 159 211 218
for_update (150)
    on left: 180, on right: 181
for_update_opt (151)
    on left: 181 182, on right: 159 218
statement_without_trailing_substatement (152)
    on left: 183 184 185 186 187 188 189 190 191, on right: 155 214
empty_statement (153)
    on left: 192, on right: 184
expression_statement (154)
    on left: 193, on right: 185
switch_statement (155)
    on left: 194, on right: 186
switch_block (156)
    on left: 195, on right: 194
switch_block_statement_groups (157)
    on left: 196 197, on right: 195
switch_block_statement_groups_ (158)
    on left: 198 199, on right: 196 197 198
switch_block_statement_group (159)
    on left: 200, on right: 196 198
switch_labels (160)
    on left: 201 202, on right: 195 200
switch_labels_ (161)
    on left: 203 204, on right: 201 202 203
switch_label (162)
    on left: 205 206, on right: 201 203
do_statement (163)
    on left: 207, on right: 187
break_statement (164)
    on left: 208, on right: 188
continue_statement (165)
    on left: 209, on right: 189
goto_statement (166)
    on left: 210, on right: 190
return_statement (167)
    on left: 211, on right: 191
identifier_opt (168)
    on left: 212 213, on right: 208 209 210
statement_no_short_if (169)
    on left: 214 215 216 217 218, on right: 161 215 216 217 218
class_member_declaration_opt (170)
    on left: 219 220, on right: 5
class_member_declaration_ (171)
    on left: 221 222, on right: 219 221
class_member_declaration (172)
    on left: 223, on right: 219 221
field_or_method_declaration (173)
    on left: 224 225, on right: 223
method_declaration (174)
    on left: 226, on right: 225
method_header (175)
    on left: 227, on right: 226
result_type (176)
    on left: 228 229 230, on right: 227
method_declarator (177)
    on left: 231, on right: 227
method_body (178)
    on left: 232 233 234, on right: 226
formal_parameter_list (179)
    on left: 235 236, on right: 231
formal_parameter_list_ (180)
    on left: 237 238, on right: 235 236 237
formal_parameter (181)
    on left: 239 240, on right: 235 237
field_declaration (182)
    on left: 241 242, on right: 224
field_modifiers_ (183)
    on left: 243 244, on right: 241 242 243
field_modifier (184)
    on left: 245 246 247, on right: 243


state 0

    0 $accept: . compilation_unit $end
    1 compilation_unit: . class_declaration
    2 class_declaration: . CLASS identifier class_body

    CLASS  shift, and go to state 1

    compilation_unit   go to state 2
    class_declaration  go to state 3


state 1

    2 class_declaration: CLASS . identifier class_body
    3 identifier: . ID

    ID  shift, and go to state 4

    identifier  go to state 5


state 2

    0 $accept: compilation_unit . $end

    $end  shift, and go to state 6


state 3

    1 compilation_unit: class_declaration .

    $default  reduce using rule 1 (compilation_unit)


state 4

    3 identifier: ID .

    $default  reduce using rule 3 (identifier)


state 5

    2 class_declaration: CLASS identifier . class_body
    4 class_body: . BEG class_body_declaration END

    BEG  shift, and go to state 7

    class_body  go to state 8


state 6

    0 $accept: compilation_unit $end .

    $default  accept


state 7

    4 class_body: BEG . class_body_declaration END
    5 class_body_declaration: . class_member_declaration_opt static_initializer class_member_declaration_opt
  219 class_member_declaration_opt: . class_member_declaration class_member_declaration_
  220                             | .  [PUBLIC]
  223 class_member_declaration: . STATIC field_or_method_declaration

    STATIC  shift, and go to state 9

    $default  reduce using rule 220 (class_member_declaration_opt)

    class_body_declaration        go to state 10
    class_member_declaration_opt  go to state 11
    class_member_declaration      go to state 12


state 8

    2 class_declaration: CLASS identifier class_body .

    $default  reduce using rule 2 (class_declaration)


state 9

   19 primitive_type: . numeric_type
   20               | . TYPE_BOOL
   21               | . TYPE_STRING
   22 numeric_type: . integral_type
   23             | . floating_point_type
   24 integral_type: . TYPE_BYTE
   25              | . TYPE_SHORT
   26              | . TYPE_INT
   27              | . TYPE_LONG
   28              | . TYPE_CHAR
   29 floating_point_type: . TYPE_FLOAT
   30                    | . TYPE_DOUBLE
  146 array_type: . primitive_type OPEN_COLC CLOSE_COLC
  223 class_member_declaration: STATIC . field_or_method_declaration
  224 field_or_method_declaration: . field_declaration
  225                            | . method_declaration
  226 method_declaration: . method_header method_body
  227 method_header: . result_type method_declarator
  228 result_type: . primitive_type
  229            | . array_type
  230            | . VOID
  241 field_declaration: . field_modifiers_ primitive_type variable_declarators PT_VIRGULA
  242                  | . field_modifiers_ primitive_type OPEN_COLC CLOSE_COLC variable_declarators PT_VIRGULA
  243 field_modifiers_: . field_modifier field_modifiers_
  244                 | .  [TYPE_INT, TYPE_SHORT, TYPE_LONG, TYPE_BYTE, TYPE_BOOL, TYPE_FLOAT, TYPE_DOUBLE, TYPE_CHAR, TYPE_STRING]
  245 field_modifier: . FINAL
  246               | . TRANSIENT
  247               | . VOLATILE

    VOID         shift, and go to state 13
    TYPE_INT     shift, and go to state 14
    TYPE_SHORT   shift, and go to state 15
    TYPE_LONG    shift, and go to state 16
    TYPE_BYTE    shift, and go to state 17
    TYPE_BOOL    shift, and go to state 18
    TYPE_FLOAT   shift, and go to state 19
    TYPE_DOUBLE  shift, and go to state 20
    TYPE_CHAR    shift, and go to state 21
    TYPE_STRING  shift, and go to state 22
    FINAL        shift, and go to state 23
    TRANSIENT    shift, and go to state 24
    VOLATILE     shift, and go to state 25

    TYPE_INT     [reduce using rule 244 (field_modifiers_)]
    TYPE_SHORT   [reduce using rule 244 (field_modifiers_)]
    TYPE_LONG    [reduce using rule 244 (field_modifiers_)]
    TYPE_BYTE    [reduce using rule 244 (field_modifiers_)]
    TYPE_BOOL    [reduce using rule 244 (field_modifiers_)]
    TYPE_FLOAT   [reduce using rule 244 (field_modifiers_)]
    TYPE_DOUBLE  [reduce using rule 244 (field_modifiers_)]
    TYPE_CHAR    [reduce using rule 244 (field_modifiers_)]
    TYPE_STRING  [reduce using rule 244 (field_modifiers_)]

    primitive_type               go to state 26
    numeric_type                 go to state 27
    integral_type                go to state 28
    floating_point_type          go to state 29
    array_type                   go to state 30
    field_or_method_declaration  go to state 31
    method_declaration           go to state 32
    method_header                go to state 33
    result_type                  go to state 34
    field_declaration            go to state 35
    field_modifiers_             go to state 36
    field_modifier               go to state 37


state 10

    4 class_body: BEG class_body_declaration . END

    END  shift, and go to state 38


state 11

    5 class_body_declaration: class_member_declaration_opt . static_initializer class_member_declaration_opt
    6 static_initializer: . PUBLIC STATIC VOID MAIN OPEN_PAREN TYPE_STRING OPEN_COLC CLOSE_COLC ARGS CLOSE_PAREN block

    PUBLIC  shift, and go to state 39

    static_initializer  go to state 40


state 12

  219 class_member_declaration_opt: class_member_declaration . class_member_declaration_
  221 class_member_declaration_: . class_member_declaration class_member_declaration_
  222                          | .  [END, PUBLIC]
  223 class_member_declaration: . STATIC field_or_method_declaration

    STATIC  shift, and go to state 9

    $default  reduce using rule 222 (class_member_declaration_)

    class_member_declaration_  go to state 41
    class_member_declaration   go to state 42


state 13

  230 result_type: VOID .

    $default  reduce using rule 230 (result_type)


state 14

   26 integral_type: TYPE_INT .

    $default  reduce using rule 26 (integral_type)


state 15

   25 integral_type: TYPE_SHORT .

    $default  reduce using rule 25 (integral_type)


state 16

   27 integral_type: TYPE_LONG .

    $default  reduce using rule 27 (integral_type)


state 17

   24 integral_type: TYPE_BYTE .

    $default  reduce using rule 24 (integral_type)


state 18

   20 primitive_type: TYPE_BOOL .

    $default  reduce using rule 20 (primitive_type)


state 19

   29 floating_point_type: TYPE_FLOAT .

    $default  reduce using rule 29 (floating_point_type)


state 20

   30 floating_point_type: TYPE_DOUBLE .

    $default  reduce using rule 30 (floating_point_type)


state 21

   28 integral_type: TYPE_CHAR .

    $default  reduce using rule 28 (integral_type)


state 22

   21 primitive_type: TYPE_STRING .

    $default  reduce using rule 21 (primitive_type)


state 23

  245 field_modifier: FINAL .

    $default  reduce using rule 245 (field_modifier)


state 24

  246 field_modifier: TRANSIENT .

    $default  reduce using rule 246 (field_modifier)


state 25

  247 field_modifier: VOLATILE .

    $default  reduce using rule 247 (field_modifier)


state 26

  146 array_type: primitive_type . OPEN_COLC CLOSE_COLC
  228 result_type: primitive_type .  [ID]

    OPEN_COLC  shift, and go to state 43

    $default  reduce using rule 228 (result_type)


state 27

   19 primitive_type: numeric_type .

    $default  reduce using rule 19 (primitive_type)


state 28

   22 numeric_type: integral_type .

    $default  reduce using rule 22 (numeric_type)


state 29

   23 numeric_type: floating_point_type .

    $default  reduce using rule 23 (numeric_type)


state 30

  229 result_type: array_type .

    $default  reduce using rule 229 (result_type)


state 31

  223 class_member_declaration: STATIC field_or_method_declaration .

    $default  reduce using rule 223 (class_member_declaration)


state 32

  225 field_or_method_declaration: method_declaration .

    $default  reduce using rule 225 (field_or_method_declaration)


state 33

    7 block: . BEG block_statements END
  226 method_declaration: method_header . method_body
  232 method_body: . block
  233            | . PT_VIRGULA
  234            | .  [END, STATIC, PUBLIC]

    BEG         shift, and go to state 44
    PT_VIRGULA  shift, and go to state 45

    $default  reduce using rule 234 (method_body)

    block        go to state 46
    method_body  go to state 47


state 34

    3 identifier: . ID
  227 method_header: result_type . method_declarator
  231 method_declarator: . identifier OPEN_PAREN formal_parameter_list CLOSE_PAREN

    ID  shift, and go to state 4

    identifier         go to state 48
    method_declarator  go to state 49


state 35

  224 field_or_method_declaration: field_declaration .

    $default  reduce using rule 224 (field_or_method_declaration)


state 36

   19 primitive_type: . numeric_type
   20               | . TYPE_BOOL
   21               | . TYPE_STRING
   22 numeric_type: . integral_type
   23             | . floating_point_type
   24 integral_type: . TYPE_BYTE
   25              | . TYPE_SHORT
   26              | . TYPE_INT
   27              | . TYPE_LONG
   28              | . TYPE_CHAR
   29 floating_point_type: . TYPE_FLOAT
   30                    | . TYPE_DOUBLE
  241 field_declaration: field_modifiers_ . primitive_type variable_declarators PT_VIRGULA
  242                  | field_modifiers_ . primitive_type OPEN_COLC CLOSE_COLC variable_declarators PT_VIRGULA

    TYPE_INT     shift, and go to state 14
    TYPE_SHORT   shift, and go to state 15
    TYPE_LONG    shift, and go to state 16
    TYPE_BYTE    shift, and go to state 17
    TYPE_BOOL    shift, and go to state 18
    TYPE_FLOAT   shift, and go to state 19
    TYPE_DOUBLE  shift, and go to state 20
    TYPE_CHAR    shift, and go to state 21
    TYPE_STRING  shift, and go to state 22

    primitive_type       go to state 50
    numeric_type         go to state 27
    integral_type        go to state 28
    floating_point_type  go to state 29


state 37

  243 field_modifiers_: . field_modifier field_modifiers_
  243                 | field_modifier . field_modifiers_
  244                 | .  [TYPE_INT, TYPE_SHORT, TYPE_LONG, TYPE_BYTE, TYPE_BOOL, TYPE_FLOAT, TYPE_DOUBLE, TYPE_CHAR, TYPE_STRING]
  245 field_modifier: . FINAL
  246               | . TRANSIENT
  247               | . VOLATILE

    FINAL      shift, and go to state 23
    TRANSIENT  shift, and go to state 24
    VOLATILE   shift, and go to state 25

    $default  reduce using rule 244 (field_modifiers_)

    field_modifiers_  go to state 51
    field_modifier    go to state 37


state 38

    4 class_body: BEG class_body_declaration END .

    $default  reduce using rule 4 (class_body)


state 39

    6 static_initializer: PUBLIC . STATIC VOID MAIN OPEN_PAREN TYPE_STRING OPEN_COLC CLOSE_COLC ARGS CLOSE_PAREN block

    STATIC  shift, and go to state 52


state 40

    5 class_body_declaration: class_member_declaration_opt static_initializer . class_member_declaration_opt
  219 class_member_declaration_opt: . class_member_declaration class_member_declaration_
  220                             | .  [END]
  223 class_member_declaration: . STATIC field_or_method_declaration

    STATIC  shift, and go to state 9

    $default  reduce using rule 220 (class_member_declaration_opt)

    class_member_declaration_opt  go to state 53
    class_member_declaration      go to state 12


state 41

  219 class_member_declaration_opt: class_member_declaration class_member_declaration_ .

    $default  reduce using rule 219 (class_member_declaration_opt)


state 42

  221 class_member_declaration_: . class_member_declaration class_member_declaration_
  221                          | class_member_declaration . class_member_declaration_
  222                          | .  [END, PUBLIC]
  223 class_member_declaration: . STATIC field_or_method_declaration

    STATIC  shift, and go to state 9

    $default  reduce using rule 222 (class_member_declaration_)

    class_member_declaration_  go to state 54
    class_member_declaration   go to state 42


state 43

  146 array_type: primitive_type OPEN_COLC . CLOSE_COLC

    CLOSE_COLC  shift, and go to state 55


state 44

    3 identifier: . ID
    7 block: . BEG block_statements END
    7      | BEG . block_statements END
    8 block_statements: . block_statement block_statements_
    9                 | . block_statements_
   10 block_statements_: . block_statement block_statements_
   11                  | .  [END]
   12 block_statement: . local_variable_declaration_statement
   13                | . statement
   14 local_variable_declaration_statement: . local_variable_declaration PT_VIRGULA local_variable_declaration_
   17 local_variable_declaration: . primitive_type variable_declarators
   18                           | . primitive_type OPEN_COLC CLOSE_COLC variable_declarators
   19 primitive_type: . numeric_type
   20               | . TYPE_BOOL
   21               | . TYPE_STRING
   22 numeric_type: . integral_type
   23             | . floating_point_type
   24 integral_type: . TYPE_BYTE
   25              | . TYPE_SHORT
   26              | . TYPE_INT
   27              | . TYPE_LONG
   28              | . TYPE_CHAR
   29 floating_point_type: . TYPE_FLOAT
   30                    | . TYPE_DOUBLE
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  151 postfix_expression: . primary_no_new_array postfix_expression_
  155 statement: . statement_without_trailing_substatement
  156          | . identifier TWO_POINTS statement
  157          | . IF OPEN_PAREN expression CLOSE_PAREN optional_else
  158          | . WHILE OPEN_PAREN expression CLOSE_PAREN statement
  159          | . FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement
  168 statement_expression: . primary_no_new_array assignment_operator assignment_expression
  169                     | . preincrement_expression
  170                     | . post_incr_decrement_expression
  171                     | . predecrement_expression
  172 preincrement_expression: . INCREMENT unary_expression
  173 post_incr_decrement_expression: . postfix_expression
  174 predecrement_expression: . DECREMENT unary_expression
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  183 statement_without_trailing_substatement: . block
  184                                        | . empty_statement
  185                                        | . expression_statement
  186                                        | . switch_statement
  187                                        | . do_statement
  188                                        | . break_statement
  189                                        | . continue_statement
  190                                        | . goto_statement
  191                                        | . return_statement
  192 empty_statement: . PT_VIRGULA
  193 expression_statement: . statement_expression PT_VIRGULA
  194 switch_statement: . SWITCH OPEN_PAREN expression CLOSE_PAREN switch_block
  207 do_statement: . DO statement WHILE OPEN_PAREN expression CLOSE_PAREN PT_VIRGULA
  208 break_statement: . BREAK identifier_opt PT_VIRGULA
  209 continue_statement: . CONTINUE identifier_opt PT_VIRGULA
  210 goto_statement: . GOTO identifier_opt PT_VIRGULA
  211 return_statement: . RETURN expression_opt PT_VIRGULA

    BEG          shift, and go to state 44
    PT_VIRGULA   shift, and go to state 56
    INCREMENT    shift, and go to state 57
    DECREMENT    shift, and go to state 58
    FOR          shift, and go to state 59
    IF           shift, and go to state 60
    WHILE        shift, and go to state 61
    SWITCH       shift, and go to state 62
    DO           shift, and go to state 63
    BREAK        shift, and go to state 64
    CONTINUE     shift, and go to state 65
    GOTO         shift, and go to state 66
    RETURN       shift, and go to state 67
    TYPE_INT     shift, and go to state 14
    TYPE_SHORT   shift, and go to state 15
    TYPE_LONG    shift, and go to state 16
    TYPE_BYTE    shift, and go to state 17
    TYPE_BOOL    shift, and go to state 18
    TYPE_FLOAT   shift, and go to state 19
    TYPE_DOUBLE  shift, and go to state 20
    TYPE_CHAR    shift, and go to state 21
    TYPE_STRING  shift, and go to state 22
    ID           shift, and go to state 4
    LITERAL      shift, and go to state 68

    $default  reduce using rule 11 (block_statements_)

    identifier                               go to state 69
    block                                    go to state 70
    block_statements                         go to state 71
    block_statements_                        go to state 72
    block_statement                          go to state 73
    local_variable_declaration_statement     go to state 74
    local_variable_declaration               go to state 75
    primitive_type                           go to state 76
    numeric_type                             go to state 27
    integral_type                            go to state 28
    floating_point_type                      go to state 29
    field_access                             go to state 77
    array_access                             go to state 78
    primary_no_new_array                     go to state 79
    postfix_expression                       go to state 80
    statement                                go to state 81
    statement_expression                     go to state 82
    preincrement_expression                  go to state 83
    post_incr_decrement_expression           go to state 84
    predecrement_expression                  go to state 85
    method_invocation                        go to state 86
    statement_without_trailing_substatement  go to state 87
    empty_statement                          go to state 88
    expression_statement                     go to state 89
    switch_statement                         go to state 90
    do_statement                             go to state 91
    break_statement                          go to state 92
    continue_statement                       go to state 93
    goto_statement                           go to state 94
    return_statement                         go to state 95


state 45

  233 method_body: PT_VIRGULA .

    $default  reduce using rule 233 (method_body)


state 46

  232 method_body: block .

    $default  reduce using rule 232 (method_body)


state 47

  226 method_declaration: method_header method_body .

    $default  reduce using rule 226 (method_declaration)


state 48

  231 method_declarator: identifier . OPEN_PAREN formal_parameter_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 96


state 49

  227 method_header: result_type method_declarator .

    $default  reduce using rule 227 (method_header)


state 50

    3 identifier: . ID
   31 variable_declarators: . variable_declarator variable_declarators_
   32 variable_declarator: . variable_declarator_id variable_declarator_
   37 variable_declarator_id: . identifier
  241 field_declaration: field_modifiers_ primitive_type . variable_declarators PT_VIRGULA
  242                  | field_modifiers_ primitive_type . OPEN_COLC CLOSE_COLC variable_declarators PT_VIRGULA

    OPEN_COLC  shift, and go to state 97
    ID         shift, and go to state 4

    identifier              go to state 98
    variable_declarators    go to state 99
    variable_declarator     go to state 100
    variable_declarator_id  go to state 101


state 51

  243 field_modifiers_: field_modifier field_modifiers_ .

    $default  reduce using rule 243 (field_modifiers_)


state 52

    6 static_initializer: PUBLIC STATIC . VOID MAIN OPEN_PAREN TYPE_STRING OPEN_COLC CLOSE_COLC ARGS CLOSE_PAREN block

    VOID  shift, and go to state 102


state 53

    5 class_body_declaration: class_member_declaration_opt static_initializer class_member_declaration_opt .

    $default  reduce using rule 5 (class_body_declaration)


state 54

  221 class_member_declaration_: class_member_declaration class_member_declaration_ .

    $default  reduce using rule 221 (class_member_declaration_)


state 55

  146 array_type: primitive_type OPEN_COLC CLOSE_COLC .

    $default  reduce using rule 146 (array_type)


state 56

  192 empty_statement: PT_VIRGULA .

    $default  reduce using rule 192 (empty_statement)


state 57

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  172 preincrement_expression: INCREMENT . unary_expression
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 103
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier            go to state 110
    field_access          go to state 77
    array_access          go to state 78
    primary_no_new_array  go to state 111
    unary_expression      go to state 112
    cast_expression       go to state 113
    postfix_expression    go to state 114
    method_invocation     go to state 86


state 58

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  174 predecrement_expression: DECREMENT . unary_expression
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 103
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier            go to state 110
    field_access          go to state 77
    array_access          go to state 78
    primary_no_new_array  go to state 111
    unary_expression      go to state 115
    cast_expression       go to state 113
    postfix_expression    go to state 114
    method_invocation     go to state 86


state 59

  159 statement: FOR . OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement

    OPEN_PAREN  shift, and go to state 116


state 60

  157 statement: IF . OPEN_PAREN expression CLOSE_PAREN optional_else

    OPEN_PAREN  shift, and go to state 117


state 61

  158 statement: WHILE . OPEN_PAREN expression CLOSE_PAREN statement

    OPEN_PAREN  shift, and go to state 118


state 62

  194 switch_statement: SWITCH . OPEN_PAREN expression CLOSE_PAREN switch_block

    OPEN_PAREN  shift, and go to state 119


state 63

    3 identifier: . ID
    7 block: . BEG block_statements END
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  151 postfix_expression: . primary_no_new_array postfix_expression_
  155 statement: . statement_without_trailing_substatement
  156          | . identifier TWO_POINTS statement
  157          | . IF OPEN_PAREN expression CLOSE_PAREN optional_else
  158          | . WHILE OPEN_PAREN expression CLOSE_PAREN statement
  159          | . FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement
  168 statement_expression: . primary_no_new_array assignment_operator assignment_expression
  169                     | . preincrement_expression
  170                     | . post_incr_decrement_expression
  171                     | . predecrement_expression
  172 preincrement_expression: . INCREMENT unary_expression
  173 post_incr_decrement_expression: . postfix_expression
  174 predecrement_expression: . DECREMENT unary_expression
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  183 statement_without_trailing_substatement: . block
  184                                        | . empty_statement
  185                                        | . expression_statement
  186                                        | . switch_statement
  187                                        | . do_statement
  188                                        | . break_statement
  189                                        | . continue_statement
  190                                        | . goto_statement
  191                                        | . return_statement
  192 empty_statement: . PT_VIRGULA
  193 expression_statement: . statement_expression PT_VIRGULA
  194 switch_statement: . SWITCH OPEN_PAREN expression CLOSE_PAREN switch_block
  207 do_statement: . DO statement WHILE OPEN_PAREN expression CLOSE_PAREN PT_VIRGULA
  207             | DO . statement WHILE OPEN_PAREN expression CLOSE_PAREN PT_VIRGULA
  208 break_statement: . BREAK identifier_opt PT_VIRGULA
  209 continue_statement: . CONTINUE identifier_opt PT_VIRGULA
  210 goto_statement: . GOTO identifier_opt PT_VIRGULA
  211 return_statement: . RETURN expression_opt PT_VIRGULA

    BEG         shift, and go to state 44
    PT_VIRGULA  shift, and go to state 56
    INCREMENT   shift, and go to state 57
    DECREMENT   shift, and go to state 58
    FOR         shift, and go to state 59
    IF          shift, and go to state 60
    WHILE       shift, and go to state 61
    SWITCH      shift, and go to state 62
    DO          shift, and go to state 63
    BREAK       shift, and go to state 64
    CONTINUE    shift, and go to state 65
    GOTO        shift, and go to state 66
    RETURN      shift, and go to state 67
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                               go to state 69
    block                                    go to state 70
    field_access                             go to state 77
    array_access                             go to state 78
    primary_no_new_array                     go to state 79
    postfix_expression                       go to state 80
    statement                                go to state 120
    statement_expression                     go to state 82
    preincrement_expression                  go to state 83
    post_incr_decrement_expression           go to state 84
    predecrement_expression                  go to state 85
    method_invocation                        go to state 86
    statement_without_trailing_substatement  go to state 87
    empty_statement                          go to state 88
    expression_statement                     go to state 89
    switch_statement                         go to state 90
    do_statement                             go to state 91
    break_statement                          go to state 92
    continue_statement                       go to state 93
    goto_statement                           go to state 94
    return_statement                         go to state 95


state 64

    3 identifier: . ID
  208 break_statement: BREAK . identifier_opt PT_VIRGULA
  212 identifier_opt: . identifier
  213               | .  [PT_VIRGULA]

    ID  shift, and go to state 4

    $default  reduce using rule 213 (identifier_opt)

    identifier      go to state 121
    identifier_opt  go to state 122


state 65

    3 identifier: . ID
  209 continue_statement: CONTINUE . identifier_opt PT_VIRGULA
  212 identifier_opt: . identifier
  213               | .  [PT_VIRGULA]

    ID  shift, and go to state 4

    $default  reduce using rule 213 (identifier_opt)

    identifier      go to state 121
    identifier_opt  go to state 123


state 66

    3 identifier: . ID
  210 goto_statement: GOTO . identifier_opt PT_VIRGULA
  212 identifier_opt: . identifier
  213               | .  [PT_VIRGULA]

    ID  shift, and go to state 4

    $default  reduce using rule 213 (identifier_opt)

    identifier      go to state 121
    identifier_opt  go to state 124


state 67

    3 identifier: . ID
   49 expression: . assignment_expression
   50 assignment_expression: . conditional_expression
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  178 expression_opt: . expression
  179               | .  [PT_VIRGULA]
  211 return_statement: RETURN . expression_opt PT_VIRGULA

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    $default  reduce using rule 179 (expression_opt)

    identifier                  go to state 110
    expression                  go to state 126
    assignment_expression       go to state 127
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 128
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86
    expression_opt              go to state 140


state 68

   59 primary_no_new_array: LITERAL .  [END, PT_VIRGULA, OPEN_COLC, CLOSE_COLC, EQUAL, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN, OR, OR_EXC, AND, PLUS, MINUS, MULT, DIV, MOD, INCREMENT, DECREMENT, SHIFT_ASSIGN, ARITH_ASSIGN, LOGIC_ASSIGN, EQUALOP, RELOP, SHIFTS]
  177 method_invocation: LITERAL . POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    POINT  shift, and go to state 141

    $default  reduce using rule 59 (primary_no_new_array)


state 69

   51 field_access: identifier . POINT identifier
   63 primary_no_new_array: identifier .  [PT_VIRGULA, OPEN_COLC, EQUAL, INCREMENT, DECREMENT, SHIFT_ASSIGN, ARITH_ASSIGN, LOGIC_ASSIGN]
  156 statement: identifier . TWO_POINTS statement
  175 method_invocation: identifier . OPEN_PAREN argument_list CLOSE_PAREN

    POINT       shift, and go to state 142
    TWO_POINTS  shift, and go to state 143
    OPEN_PAREN  shift, and go to state 144

    $default  reduce using rule 63 (primary_no_new_array)


state 70

  183 statement_without_trailing_substatement: block .

    $default  reduce using rule 183 (statement_without_trailing_substatement)


state 71

    7 block: BEG block_statements . END

    END  shift, and go to state 145


state 72

    9 block_statements: block_statements_ .

    $default  reduce using rule 9 (block_statements)


state 73

    3 identifier: . ID
    7 block: . BEG block_statements END
    8 block_statements: block_statement . block_statements_
   10 block_statements_: . block_statement block_statements_
   10                  | block_statement . block_statements_
   11                  | .  [BEG, END, PT_VIRGULA, INCREMENT, DECREMENT, FOR, IF, WHILE, CASE, SWITCH, DEFAULT, DO, BREAK, CONTINUE, GOTO, RETURN, TYPE_INT, TYPE_SHORT, TYPE_LONG, TYPE_BYTE, TYPE_BOOL, TYPE_FLOAT, TYPE_DOUBLE, TYPE_CHAR, TYPE_STRING, ID, LITERAL]
   12 block_statement: . local_variable_declaration_statement
   13                | . statement
   14 local_variable_declaration_statement: . local_variable_declaration PT_VIRGULA local_variable_declaration_
   17 local_variable_declaration: . primitive_type variable_declarators
   18                           | . primitive_type OPEN_COLC CLOSE_COLC variable_declarators
   19 primitive_type: . numeric_type
   20               | . TYPE_BOOL
   21               | . TYPE_STRING
   22 numeric_type: . integral_type
   23             | . floating_point_type
   24 integral_type: . TYPE_BYTE
   25              | . TYPE_SHORT
   26              | . TYPE_INT
   27              | . TYPE_LONG
   28              | . TYPE_CHAR
   29 floating_point_type: . TYPE_FLOAT
   30                    | . TYPE_DOUBLE
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  151 postfix_expression: . primary_no_new_array postfix_expression_
  155 statement: . statement_without_trailing_substatement
  156          | . identifier TWO_POINTS statement
  157          | . IF OPEN_PAREN expression CLOSE_PAREN optional_else
  158          | . WHILE OPEN_PAREN expression CLOSE_PAREN statement
  159          | . FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement
  168 statement_expression: . primary_no_new_array assignment_operator assignment_expression
  169                     | . preincrement_expression
  170                     | . post_incr_decrement_expression
  171                     | . predecrement_expression
  172 preincrement_expression: . INCREMENT unary_expression
  173 post_incr_decrement_expression: . postfix_expression
  174 predecrement_expression: . DECREMENT unary_expression
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  183 statement_without_trailing_substatement: . block
  184                                        | . empty_statement
  185                                        | . expression_statement
  186                                        | . switch_statement
  187                                        | . do_statement
  188                                        | . break_statement
  189                                        | . continue_statement
  190                                        | . goto_statement
  191                                        | . return_statement
  192 empty_statement: . PT_VIRGULA
  193 expression_statement: . statement_expression PT_VIRGULA
  194 switch_statement: . SWITCH OPEN_PAREN expression CLOSE_PAREN switch_block
  207 do_statement: . DO statement WHILE OPEN_PAREN expression CLOSE_PAREN PT_VIRGULA
  208 break_statement: . BREAK identifier_opt PT_VIRGULA
  209 continue_statement: . CONTINUE identifier_opt PT_VIRGULA
  210 goto_statement: . GOTO identifier_opt PT_VIRGULA
  211 return_statement: . RETURN expression_opt PT_VIRGULA

    BEG          shift, and go to state 44
    PT_VIRGULA   shift, and go to state 56
    INCREMENT    shift, and go to state 57
    DECREMENT    shift, and go to state 58
    FOR          shift, and go to state 59
    IF           shift, and go to state 60
    WHILE        shift, and go to state 61
    SWITCH       shift, and go to state 62
    DO           shift, and go to state 63
    BREAK        shift, and go to state 64
    CONTINUE     shift, and go to state 65
    GOTO         shift, and go to state 66
    RETURN       shift, and go to state 67
    TYPE_INT     shift, and go to state 14
    TYPE_SHORT   shift, and go to state 15
    TYPE_LONG    shift, and go to state 16
    TYPE_BYTE    shift, and go to state 17
    TYPE_BOOL    shift, and go to state 18
    TYPE_FLOAT   shift, and go to state 19
    TYPE_DOUBLE  shift, and go to state 20
    TYPE_CHAR    shift, and go to state 21
    TYPE_STRING  shift, and go to state 22
    ID           shift, and go to state 4
    LITERAL      shift, and go to state 68

    BEG          [reduce using rule 11 (block_statements_)]
    PT_VIRGULA   [reduce using rule 11 (block_statements_)]
    INCREMENT    [reduce using rule 11 (block_statements_)]
    DECREMENT    [reduce using rule 11 (block_statements_)]
    FOR          [reduce using rule 11 (block_statements_)]
    IF           [reduce using rule 11 (block_statements_)]
    WHILE        [reduce using rule 11 (block_statements_)]
    SWITCH       [reduce using rule 11 (block_statements_)]
    DO           [reduce using rule 11 (block_statements_)]
    BREAK        [reduce using rule 11 (block_statements_)]
    CONTINUE     [reduce using rule 11 (block_statements_)]
    GOTO         [reduce using rule 11 (block_statements_)]
    RETURN       [reduce using rule 11 (block_statements_)]
    TYPE_INT     [reduce using rule 11 (block_statements_)]
    TYPE_SHORT   [reduce using rule 11 (block_statements_)]
    TYPE_LONG    [reduce using rule 11 (block_statements_)]
    TYPE_BYTE    [reduce using rule 11 (block_statements_)]
    TYPE_BOOL    [reduce using rule 11 (block_statements_)]
    TYPE_FLOAT   [reduce using rule 11 (block_statements_)]
    TYPE_DOUBLE  [reduce using rule 11 (block_statements_)]
    TYPE_CHAR    [reduce using rule 11 (block_statements_)]
    TYPE_STRING  [reduce using rule 11 (block_statements_)]
    ID           [reduce using rule 11 (block_statements_)]
    LITERAL      [reduce using rule 11 (block_statements_)]
    $default     reduce using rule 11 (block_statements_)

    identifier                               go to state 69
    block                                    go to state 70
    block_statements_                        go to state 146
    block_statement                          go to state 147
    local_variable_declaration_statement     go to state 74
    local_variable_declaration               go to state 75
    primitive_type                           go to state 76
    numeric_type                             go to state 27
    integral_type                            go to state 28
    floating_point_type                      go to state 29
    field_access                             go to state 77
    array_access                             go to state 78
    primary_no_new_array                     go to state 79
    postfix_expression                       go to state 80
    statement                                go to state 81
    statement_expression                     go to state 82
    preincrement_expression                  go to state 83
    post_incr_decrement_expression           go to state 84
    predecrement_expression                  go to state 85
    method_invocation                        go to state 86
    statement_without_trailing_substatement  go to state 87
    empty_statement                          go to state 88
    expression_statement                     go to state 89
    switch_statement                         go to state 90
    do_statement                             go to state 91
    break_statement                          go to state 92
    continue_statement                       go to state 93
    goto_statement                           go to state 94
    return_statement                         go to state 95


state 74

   12 block_statement: local_variable_declaration_statement .

    $default  reduce using rule 12 (block_statement)


state 75

   14 local_variable_declaration_statement: local_variable_declaration . PT_VIRGULA local_variable_declaration_

    PT_VIRGULA  shift, and go to state 148


state 76

    3 identifier: . ID
   17 local_variable_declaration: primitive_type . variable_declarators
   18                           | primitive_type . OPEN_COLC CLOSE_COLC variable_declarators
   31 variable_declarators: . variable_declarator variable_declarators_
   32 variable_declarator: . variable_declarator_id variable_declarator_
   37 variable_declarator_id: . identifier

    OPEN_COLC  shift, and go to state 149
    ID         shift, and go to state 4

    identifier              go to state 98
    variable_declarators    go to state 150
    variable_declarator     go to state 100
    variable_declarator_id  go to state 101


state 77

   60 primary_no_new_array: field_access .  [END, PT_VIRGULA, OPEN_COLC, CLOSE_COLC, EQUAL, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN, OR, OR_EXC, AND, PLUS, MINUS, MULT, DIV, MOD, INCREMENT, DECREMENT, SHIFT_ASSIGN, ARITH_ASSIGN, LOGIC_ASSIGN, EQUALOP, RELOP, SHIFTS]
  176 method_invocation: field_access . OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 151

    OPEN_PAREN  [reduce using rule 60 (primary_no_new_array)]
    $default    reduce using rule 60 (primary_no_new_array)


state 78

   62 primary_no_new_array: array_access .

    $default  reduce using rule 62 (primary_no_new_array)


state 79

   54 assignment_operator: . EQUAL
   55                    | . ARITH_ASSIGN
   56                    | . SHIFT_ASSIGN
   57                    | . LOGIC_ASSIGN
   58 array_access: primary_no_new_array . OPEN_COLC expression CLOSE_COLC
  151 postfix_expression: primary_no_new_array . postfix_expression_
  152 postfix_expression_: . INCREMENT postfix_expression_
  153                    | . DECREMENT postfix_expression_
  154                    | .  [PT_VIRGULA, VIRGULA, CLOSE_PAREN]
  168 statement_expression: primary_no_new_array . assignment_operator assignment_expression

    OPEN_COLC     shift, and go to state 152
    EQUAL         shift, and go to state 153
    INCREMENT     shift, and go to state 154
    DECREMENT     shift, and go to state 155
    SHIFT_ASSIGN  shift, and go to state 156
    ARITH_ASSIGN  shift, and go to state 157
    LOGIC_ASSIGN  shift, and go to state 158

    $default  reduce using rule 154 (postfix_expression_)

    assignment_operator  go to state 159
    postfix_expression_  go to state 160


state 80

  173 post_incr_decrement_expression: postfix_expression .

    $default  reduce using rule 173 (post_incr_decrement_expression)


state 81

   13 block_statement: statement .

    $default  reduce using rule 13 (block_statement)


state 82

  193 expression_statement: statement_expression . PT_VIRGULA

    PT_VIRGULA  shift, and go to state 161


state 83

  169 statement_expression: preincrement_expression .

    $default  reduce using rule 169 (statement_expression)


state 84

  170 statement_expression: post_incr_decrement_expression .

    $default  reduce using rule 170 (statement_expression)


state 85

  171 statement_expression: predecrement_expression .

    $default  reduce using rule 171 (statement_expression)


state 86

   61 primary_no_new_array: method_invocation .

    $default  reduce using rule 61 (primary_no_new_array)


state 87

  155 statement: statement_without_trailing_substatement .

    $default  reduce using rule 155 (statement)


state 88

  184 statement_without_trailing_substatement: empty_statement .

    $default  reduce using rule 184 (statement_without_trailing_substatement)


state 89

  185 statement_without_trailing_substatement: expression_statement .

    $default  reduce using rule 185 (statement_without_trailing_substatement)


state 90

  186 statement_without_trailing_substatement: switch_statement .

    $default  reduce using rule 186 (statement_without_trailing_substatement)


state 91

  187 statement_without_trailing_substatement: do_statement .

    $default  reduce using rule 187 (statement_without_trailing_substatement)


state 92

  188 statement_without_trailing_substatement: break_statement .

    $default  reduce using rule 188 (statement_without_trailing_substatement)


state 93

  189 statement_without_trailing_substatement: continue_statement .

    $default  reduce using rule 189 (statement_without_trailing_substatement)


state 94

  190 statement_without_trailing_substatement: goto_statement .

    $default  reduce using rule 190 (statement_without_trailing_substatement)


state 95

  191 statement_without_trailing_substatement: return_statement .

    $default  reduce using rule 191 (statement_without_trailing_substatement)


state 96

   19 primitive_type: . numeric_type
   20               | . TYPE_BOOL
   21               | . TYPE_STRING
   22 numeric_type: . integral_type
   23             | . floating_point_type
   24 integral_type: . TYPE_BYTE
   25              | . TYPE_SHORT
   26              | . TYPE_INT
   27              | . TYPE_LONG
   28              | . TYPE_CHAR
   29 floating_point_type: . TYPE_FLOAT
   30                    | . TYPE_DOUBLE
  146 array_type: . primitive_type OPEN_COLC CLOSE_COLC
  231 method_declarator: identifier OPEN_PAREN . formal_parameter_list CLOSE_PAREN
  235 formal_parameter_list: . formal_parameter formal_parameter_list_
  236                      | . formal_parameter_list_
  237 formal_parameter_list_: . VIRGULA formal_parameter formal_parameter_list_
  238                       | .  [CLOSE_PAREN]
  239 formal_parameter: . primitive_type variable_declarator_id
  240                 | . array_type variable_declarator_id

    VIRGULA      shift, and go to state 162
    TYPE_INT     shift, and go to state 14
    TYPE_SHORT   shift, and go to state 15
    TYPE_LONG    shift, and go to state 16
    TYPE_BYTE    shift, and go to state 17
    TYPE_BOOL    shift, and go to state 18
    TYPE_FLOAT   shift, and go to state 19
    TYPE_DOUBLE  shift, and go to state 20
    TYPE_CHAR    shift, and go to state 21
    TYPE_STRING  shift, and go to state 22

    $default  reduce using rule 238 (formal_parameter_list_)

    primitive_type          go to state 163
    numeric_type            go to state 27
    integral_type           go to state 28
    floating_point_type     go to state 29
    array_type              go to state 164
    formal_parameter_list   go to state 165
    formal_parameter_list_  go to state 166
    formal_parameter        go to state 167


state 97

  242 field_declaration: field_modifiers_ primitive_type OPEN_COLC . CLOSE_COLC variable_declarators PT_VIRGULA

    CLOSE_COLC  shift, and go to state 168


state 98

   37 variable_declarator_id: identifier .

    $default  reduce using rule 37 (variable_declarator_id)


state 99

  241 field_declaration: field_modifiers_ primitive_type variable_declarators . PT_VIRGULA

    PT_VIRGULA  shift, and go to state 169


state 100

   31 variable_declarators: variable_declarator . variable_declarators_
   33 variable_declarators_: . VIRGULA variable_declarator variable_declarators_
   34                      | .  [PT_VIRGULA]

    VIRGULA  shift, and go to state 170

    $default  reduce using rule 34 (variable_declarators_)

    variable_declarators_  go to state 171


state 101

   32 variable_declarator: variable_declarator_id . variable_declarator_
   35 variable_declarator_: . EQUAL variable_initializer
   36                     | .  [PT_VIRGULA, VIRGULA]

    EQUAL  shift, and go to state 172

    $default  reduce using rule 36 (variable_declarator_)

    variable_declarator_  go to state 173


state 102

    6 static_initializer: PUBLIC STATIC VOID . MAIN OPEN_PAREN TYPE_STRING OPEN_COLC CLOSE_COLC ARGS CLOSE_PAREN block

    MAIN  shift, and go to state 174


state 103

    3 identifier: . ID
   19 primitive_type: . numeric_type
   20               | . TYPE_BOOL
   21               | . TYPE_STRING
   22 numeric_type: . integral_type
   23             | . floating_point_type
   24 integral_type: . TYPE_BYTE
   25              | . TYPE_SHORT
   26              | . TYPE_INT
   27              | . TYPE_LONG
   28              | . TYPE_CHAR
   29 floating_point_type: . TYPE_FLOAT
   30                    | . TYPE_DOUBLE
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  140                 | OPEN_PAREN . conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  141                | OPEN_PAREN . primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  142                | OPEN_PAREN . reference_type CLOSE_PAREN unary_expression_not_plus_minus
  143 reference_type: . class_type
  144               | . array_type
  145 class_type: . identifier
  146 array_type: . primitive_type OPEN_COLC CLOSE_COLC
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN   shift, and go to state 125
    PLUS         shift, and go to state 104
    MINUS        shift, and go to state 105
    INCREMENT    shift, and go to state 106
    DECREMENT    shift, and go to state 107
    NOT          shift, and go to state 108
    NOT_BIT      shift, and go to state 109
    TYPE_INT     shift, and go to state 14
    TYPE_SHORT   shift, and go to state 15
    TYPE_LONG    shift, and go to state 16
    TYPE_BYTE    shift, and go to state 17
    TYPE_BOOL    shift, and go to state 18
    TYPE_FLOAT   shift, and go to state 19
    TYPE_DOUBLE  shift, and go to state 20
    TYPE_CHAR    shift, and go to state 21
    TYPE_STRING  shift, and go to state 22
    ID           shift, and go to state 4
    LITERAL      shift, and go to state 68

    identifier                  go to state 175
    primitive_type              go to state 176
    numeric_type                go to state 27
    integral_type               go to state 28
    floating_point_type         go to state 29
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 177
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    reference_type              go to state 178
    class_type                  go to state 179
    array_type                  go to state 180
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 104

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  134                 | PLUS . unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 103
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier            go to state 110
    field_access          go to state 77
    array_access          go to state 78
    primary_no_new_array  go to state 111
    unary_expression      go to state 181
    cast_expression       go to state 113
    postfix_expression    go to state 114
    method_invocation     go to state 86


state 105

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  135                 | MINUS . unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 103
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier            go to state 110
    field_access          go to state 77
    array_access          go to state 78
    primary_no_new_array  go to state 111
    unary_expression      go to state 182
    cast_expression       go to state 113
    postfix_expression    go to state 114
    method_invocation     go to state 86


state 106

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  132 unary_expression: . INCREMENT unary_expression
  132                 | INCREMENT . unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 103
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier            go to state 110
    field_access          go to state 77
    array_access          go to state 78
    primary_no_new_array  go to state 111
    unary_expression      go to state 183
    cast_expression       go to state 113
    postfix_expression    go to state 114
    method_invocation     go to state 86


state 107

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  133                 | DECREMENT . unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 103
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier            go to state 110
    field_access          go to state 77
    array_access          go to state 78
    primary_no_new_array  go to state 111
    unary_expression      go to state 184
    cast_expression       go to state 113
    postfix_expression    go to state 114
    method_invocation     go to state 86


state 108

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  137                 | NOT . unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 103
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier            go to state 110
    field_access          go to state 77
    array_access          go to state 78
    primary_no_new_array  go to state 111
    unary_expression      go to state 185
    cast_expression       go to state 113
    postfix_expression    go to state 114
    method_invocation     go to state 86


state 109

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  138                 | NOT_BIT . unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 103
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier            go to state 110
    field_access          go to state 77
    array_access          go to state 78
    primary_no_new_array  go to state 111
    unary_expression      go to state 186
    cast_expression       go to state 113
    postfix_expression    go to state 114
    method_invocation     go to state 86


state 110

   51 field_access: identifier . POINT identifier
   63 primary_no_new_array: identifier .  [END, PT_VIRGULA, OPEN_COLC, CLOSE_COLC, EQUAL, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN, OR, OR_EXC, AND, PLUS, MINUS, MULT, DIV, MOD, INCREMENT, DECREMENT, SHIFT_ASSIGN, ARITH_ASSIGN, LOGIC_ASSIGN, EQUALOP, RELOP, SHIFTS]
  175 method_invocation: identifier . OPEN_PAREN argument_list CLOSE_PAREN

    POINT       shift, and go to state 142
    OPEN_PAREN  shift, and go to state 144

    OPEN_PAREN  [reduce using rule 63 (primary_no_new_array)]
    $default    reduce using rule 63 (primary_no_new_array)


state 111

   58 array_access: primary_no_new_array . OPEN_COLC expression CLOSE_COLC
  151 postfix_expression: primary_no_new_array . postfix_expression_
  152 postfix_expression_: . INCREMENT postfix_expression_
  153                    | . DECREMENT postfix_expression_
  154                    | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN, OR, OR_EXC, AND, PLUS, MINUS, MULT, DIV, MOD, EQUALOP, RELOP, SHIFTS]

    OPEN_COLC  shift, and go to state 152
    INCREMENT  shift, and go to state 154
    DECREMENT  shift, and go to state 155

    $default  reduce using rule 154 (postfix_expression_)

    postfix_expression_  go to state 160


state 112

  172 preincrement_expression: INCREMENT unary_expression .

    $default  reduce using rule 172 (preincrement_expression)


state 113

  139 unary_expression: cast_expression .

    $default  reduce using rule 139 (unary_expression)


state 114

  136 unary_expression: postfix_expression .

    $default  reduce using rule 136 (unary_expression)


state 115

  174 predecrement_expression: DECREMENT unary_expression .

    $default  reduce using rule 174 (predecrement_expression)


state 116

    3 identifier: . ID
   17 local_variable_declaration: . primitive_type variable_declarators
   18                           | . primitive_type OPEN_COLC CLOSE_COLC variable_declarators
   19 primitive_type: . numeric_type
   20               | . TYPE_BOOL
   21               | . TYPE_STRING
   22 numeric_type: . integral_type
   23             | . floating_point_type
   24 integral_type: . TYPE_BYTE
   25              | . TYPE_SHORT
   26              | . TYPE_INT
   27              | . TYPE_LONG
   28              | . TYPE_CHAR
   29 floating_point_type: . TYPE_FLOAT
   30                    | . TYPE_DOUBLE
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  151 postfix_expression: . primary_no_new_array postfix_expression_
  159 statement: FOR OPEN_PAREN . for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement
  162 for_init: . statement_expression_list
  163         | . local_variable_declaration
  164         | .  [PT_VIRGULA]
  165 statement_expression_list: . statement_expression statement_expression_list_
  168 statement_expression: . primary_no_new_array assignment_operator assignment_expression
  169                     | . preincrement_expression
  170                     | . post_incr_decrement_expression
  171                     | . predecrement_expression
  172 preincrement_expression: . INCREMENT unary_expression
  173 post_incr_decrement_expression: . postfix_expression
  174 predecrement_expression: . DECREMENT unary_expression
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    INCREMENT    shift, and go to state 57
    DECREMENT    shift, and go to state 58
    TYPE_INT     shift, and go to state 14
    TYPE_SHORT   shift, and go to state 15
    TYPE_LONG    shift, and go to state 16
    TYPE_BYTE    shift, and go to state 17
    TYPE_BOOL    shift, and go to state 18
    TYPE_FLOAT   shift, and go to state 19
    TYPE_DOUBLE  shift, and go to state 20
    TYPE_CHAR    shift, and go to state 21
    TYPE_STRING  shift, and go to state 22
    ID           shift, and go to state 4
    LITERAL      shift, and go to state 68

    $default  reduce using rule 164 (for_init)

    identifier                      go to state 110
    local_variable_declaration      go to state 187
    primitive_type                  go to state 76
    numeric_type                    go to state 27
    integral_type                   go to state 28
    floating_point_type             go to state 29
    field_access                    go to state 77
    array_access                    go to state 78
    primary_no_new_array            go to state 79
    postfix_expression              go to state 80
    for_init                        go to state 188
    statement_expression_list       go to state 189
    statement_expression            go to state 190
    preincrement_expression         go to state 83
    post_incr_decrement_expression  go to state 84
    predecrement_expression         go to state 85
    method_invocation               go to state 86


state 117

    3 identifier: . ID
   49 expression: . assignment_expression
   50 assignment_expression: . conditional_expression
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  157 statement: IF OPEN_PAREN . expression CLOSE_PAREN optional_else
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    expression                  go to state 191
    assignment_expression       go to state 127
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 128
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 118

    3 identifier: . ID
   49 expression: . assignment_expression
   50 assignment_expression: . conditional_expression
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  158 statement: WHILE OPEN_PAREN . expression CLOSE_PAREN statement
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    expression                  go to state 192
    assignment_expression       go to state 127
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 128
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 119

    3 identifier: . ID
   49 expression: . assignment_expression
   50 assignment_expression: . conditional_expression
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  194 switch_statement: SWITCH OPEN_PAREN . expression CLOSE_PAREN switch_block

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    expression                  go to state 193
    assignment_expression       go to state 127
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 128
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 120

  207 do_statement: DO statement . WHILE OPEN_PAREN expression CLOSE_PAREN PT_VIRGULA

    WHILE  shift, and go to state 194


state 121

  212 identifier_opt: identifier .

    $default  reduce using rule 212 (identifier_opt)


state 122

  208 break_statement: BREAK identifier_opt . PT_VIRGULA

    PT_VIRGULA  shift, and go to state 195


state 123

  209 continue_statement: CONTINUE identifier_opt . PT_VIRGULA

    PT_VIRGULA  shift, and go to state 196


state 124

  210 goto_statement: GOTO identifier_opt . PT_VIRGULA

    PT_VIRGULA  shift, and go to state 197


state 125

    3 identifier: . ID
   19 primitive_type: . numeric_type
   20               | . TYPE_BOOL
   21               | . TYPE_STRING
   22 numeric_type: . integral_type
   23             | . floating_point_type
   24 integral_type: . TYPE_BYTE
   25              | . TYPE_SHORT
   26              | . TYPE_INT
   27              | . TYPE_LONG
   28              | . TYPE_CHAR
   29 floating_point_type: . TYPE_FLOAT
   30                    | . TYPE_DOUBLE
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   75                       | OPEN_PAREN . conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | OPEN_PAREN . conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  140                 | OPEN_PAREN . conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  141                | OPEN_PAREN . primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  142                | OPEN_PAREN . reference_type CLOSE_PAREN unary_expression_not_plus_minus
  143 reference_type: . class_type
  144               | . array_type
  145 class_type: . identifier
  146 array_type: . primitive_type OPEN_COLC CLOSE_COLC
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN   shift, and go to state 125
    PLUS         shift, and go to state 104
    MINUS        shift, and go to state 105
    INCREMENT    shift, and go to state 106
    DECREMENT    shift, and go to state 107
    NOT          shift, and go to state 108
    NOT_BIT      shift, and go to state 109
    TYPE_INT     shift, and go to state 14
    TYPE_SHORT   shift, and go to state 15
    TYPE_LONG    shift, and go to state 16
    TYPE_BYTE    shift, and go to state 17
    TYPE_BOOL    shift, and go to state 18
    TYPE_FLOAT   shift, and go to state 19
    TYPE_DOUBLE  shift, and go to state 20
    TYPE_CHAR    shift, and go to state 21
    TYPE_STRING  shift, and go to state 22
    ID           shift, and go to state 4
    LITERAL      shift, and go to state 68

    identifier                  go to state 175
    primitive_type              go to state 176
    numeric_type                go to state 27
    integral_type               go to state 28
    floating_point_type         go to state 29
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 177
    conditional_or_expression   go to state 198
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    reference_type              go to state 178
    class_type                  go to state 179
    array_type                  go to state 180
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 126

  178 expression_opt: expression .

    $default  reduce using rule 178 (expression_opt)


state 127

   49 expression: assignment_expression .

    $default  reduce using rule 49 (expression)


state 128

   50 assignment_expression: conditional_expression .

    $default  reduce using rule 50 (assignment_expression)


state 129

   74 conditional_expression: conditional_or_expression .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, TWO_POINTS, CLOSE_PAREN]
   76                       | conditional_or_expression . QUESTION_MARK conditional_expression TWO_POINTS conditional_expression

    QUESTION_MARK  shift, and go to state 199

    $default  reduce using rule 74 (conditional_expression)


state 130

   89 conditional_or_expression: conditional_and_expression . conditional_or_expression_
   90                          | conditional_and_expression . OPEN_PAREN conditional_expression CLOSE_PAREN
   91 conditional_or_expression_: . OR_LOGIC conditional_and_expression conditional_or_expression_
   92                           | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, CLOSE_PAREN]

    OR_LOGIC    shift, and go to state 200
    OPEN_PAREN  shift, and go to state 201

    $default  reduce using rule 92 (conditional_or_expression_)

    conditional_or_expression_  go to state 202


state 131

   93 conditional_and_expression: inclusive_or_expression . conditional_and_expression_
   94                           | inclusive_or_expression . OPEN_PAREN conditional_expression CLOSE_PAREN
   95 conditional_and_expression_: . AND_LOGIC inclusive_or_expression conditional_and_expression_
   96                            | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, OPEN_PAREN, CLOSE_PAREN]

    AND_LOGIC   shift, and go to state 203
    OPEN_PAREN  shift, and go to state 204

    OPEN_PAREN  [reduce using rule 96 (conditional_and_expression_)]
    $default    reduce using rule 96 (conditional_and_expression_)

    conditional_and_expression_  go to state 205


state 132

   97 inclusive_or_expression: exclusive_or_expression . inclusive_or_expression_
   98                        | exclusive_or_expression . OPEN_PAREN conditional_expression CLOSE_PAREN
   99 inclusive_or_expression_: . OR exclusive_or_expression inclusive_or_expression_
  100                         | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN]

    OPEN_PAREN  shift, and go to state 206
    OR          shift, and go to state 207

    OPEN_PAREN  [reduce using rule 100 (inclusive_or_expression_)]
    $default    reduce using rule 100 (inclusive_or_expression_)

    inclusive_or_expression_  go to state 208


state 133

  101 exclusive_or_expression: and_expression . exclusive_or_expression_
  102                        | and_expression . OPEN_PAREN conditional_expression CLOSE_PAREN
  103 exclusive_or_expression_: . OR_EXC and_expression exclusive_or_expression_
  104                         | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN, OR]

    OPEN_PAREN  shift, and go to state 209
    OR_EXC      shift, and go to state 210

    OPEN_PAREN  [reduce using rule 104 (exclusive_or_expression_)]
    $default    reduce using rule 104 (exclusive_or_expression_)

    exclusive_or_expression_  go to state 211


state 134

  105 and_expression: equality_expression . and_expression_
  106               | equality_expression . OPEN_PAREN conditional_expression CLOSE_PAREN
  107 and_expression_: . AND equality_expression and_expression_
  108                | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN, OR, OR_EXC]

    OPEN_PAREN  shift, and go to state 212
    AND         shift, and go to state 213

    OPEN_PAREN  [reduce using rule 108 (and_expression_)]
    $default    reduce using rule 108 (and_expression_)

    and_expression_  go to state 214


state 135

  109 equality_expression: relational_expression . equality_expression_
  110                    | relational_expression . OPEN_PAREN conditional_expression CLOSE_PAREN
  111 equality_expression_: . EQUALOP relational_expression equality_expression_
  112                     | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN, OR, OR_EXC, AND]

    OPEN_PAREN  shift, and go to state 215
    EQUALOP     shift, and go to state 216

    OPEN_PAREN  [reduce using rule 112 (equality_expression_)]
    $default    reduce using rule 112 (equality_expression_)

    equality_expression_  go to state 217


state 136

  113 relational_expression: shift_expression . relational_expression_
  114                      | shift_expression . OPEN_PAREN conditional_expression CLOSE_PAREN
  115 relational_expression_: . RELOP shift_expression relational_expression_
  116                       | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN, OR, OR_EXC, AND, EQUALOP]

    OPEN_PAREN  shift, and go to state 218
    RELOP       shift, and go to state 219

    OPEN_PAREN  [reduce using rule 116 (relational_expression_)]
    $default    reduce using rule 116 (relational_expression_)

    relational_expression_  go to state 220


state 137

  117 shift_expression: additive_expression . shift_expression_
  118                 | additive_expression . OPEN_PAREN conditional_expression CLOSE_PAREN
  119 shift_expression_: . SHIFTS additive_expression shift_expression_
  120                  | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN, OR, OR_EXC, AND, EQUALOP, RELOP]

    OPEN_PAREN  shift, and go to state 221
    SHIFTS      shift, and go to state 222

    OPEN_PAREN  [reduce using rule 120 (shift_expression_)]
    $default    reduce using rule 120 (shift_expression_)

    shift_expression_  go to state 223


state 138

  121 additive_expression: multiplicative_expression . additive_expression_
  122                    | multiplicative_expression . OPEN_PAREN conditional_expression CLOSE_PAREN
  123 additive_expression_: . PLUS multiplicative_expression additive_expression_
  124                     | . MINUS multiplicative_expression additive_expression_
  125                     | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN, OR, OR_EXC, AND, EQUALOP, RELOP, SHIFTS]

    OPEN_PAREN  shift, and go to state 224
    PLUS        shift, and go to state 225
    MINUS       shift, and go to state 226

    OPEN_PAREN  [reduce using rule 125 (additive_expression_)]
    $default    reduce using rule 125 (additive_expression_)

    additive_expression_  go to state 227


state 139

  126 multiplicative_expression: unary_expression . multiplicative_expression_
  127                          | unary_expression . OPEN_PAREN conditional_expression CLOSE_PAREN
  128 multiplicative_expression_: . MULT unary_expression multiplicative_expression_
  129                           | . DIV unary_expression multiplicative_expression_
  130                           | . MOD unary_expression multiplicative_expression_
  131                           | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN, OR, OR_EXC, AND, PLUS, MINUS, EQUALOP, RELOP, SHIFTS]

    OPEN_PAREN  shift, and go to state 228
    MULT        shift, and go to state 229
    DIV         shift, and go to state 230
    MOD         shift, and go to state 231

    OPEN_PAREN  [reduce using rule 131 (multiplicative_expression_)]
    $default    reduce using rule 131 (multiplicative_expression_)

    multiplicative_expression_  go to state 232


state 140

  211 return_statement: RETURN expression_opt . PT_VIRGULA

    PT_VIRGULA  shift, and go to state 233


state 141

    3 identifier: . ID
  177 method_invocation: LITERAL POINT . identifier OPEN_PAREN argument_list CLOSE_PAREN

    ID  shift, and go to state 4

    identifier  go to state 234


state 142

    3 identifier: . ID
   51 field_access: identifier POINT . identifier

    ID  shift, and go to state 4

    identifier  go to state 235


state 143

    3 identifier: . ID
    7 block: . BEG block_statements END
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  151 postfix_expression: . primary_no_new_array postfix_expression_
  155 statement: . statement_without_trailing_substatement
  156          | . identifier TWO_POINTS statement
  156          | identifier TWO_POINTS . statement
  157          | . IF OPEN_PAREN expression CLOSE_PAREN optional_else
  158          | . WHILE OPEN_PAREN expression CLOSE_PAREN statement
  159          | . FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement
  168 statement_expression: . primary_no_new_array assignment_operator assignment_expression
  169                     | . preincrement_expression
  170                     | . post_incr_decrement_expression
  171                     | . predecrement_expression
  172 preincrement_expression: . INCREMENT unary_expression
  173 post_incr_decrement_expression: . postfix_expression
  174 predecrement_expression: . DECREMENT unary_expression
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  183 statement_without_trailing_substatement: . block
  184                                        | . empty_statement
  185                                        | . expression_statement
  186                                        | . switch_statement
  187                                        | . do_statement
  188                                        | . break_statement
  189                                        | . continue_statement
  190                                        | . goto_statement
  191                                        | . return_statement
  192 empty_statement: . PT_VIRGULA
  193 expression_statement: . statement_expression PT_VIRGULA
  194 switch_statement: . SWITCH OPEN_PAREN expression CLOSE_PAREN switch_block
  207 do_statement: . DO statement WHILE OPEN_PAREN expression CLOSE_PAREN PT_VIRGULA
  208 break_statement: . BREAK identifier_opt PT_VIRGULA
  209 continue_statement: . CONTINUE identifier_opt PT_VIRGULA
  210 goto_statement: . GOTO identifier_opt PT_VIRGULA
  211 return_statement: . RETURN expression_opt PT_VIRGULA

    BEG         shift, and go to state 44
    PT_VIRGULA  shift, and go to state 56
    INCREMENT   shift, and go to state 57
    DECREMENT   shift, and go to state 58
    FOR         shift, and go to state 59
    IF          shift, and go to state 60
    WHILE       shift, and go to state 61
    SWITCH      shift, and go to state 62
    DO          shift, and go to state 63
    BREAK       shift, and go to state 64
    CONTINUE    shift, and go to state 65
    GOTO        shift, and go to state 66
    RETURN      shift, and go to state 67
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                               go to state 69
    block                                    go to state 70
    field_access                             go to state 77
    array_access                             go to state 78
    primary_no_new_array                     go to state 79
    postfix_expression                       go to state 80
    statement                                go to state 236
    statement_expression                     go to state 82
    preincrement_expression                  go to state 83
    post_incr_decrement_expression           go to state 84
    predecrement_expression                  go to state 85
    method_invocation                        go to state 86
    statement_without_trailing_substatement  go to state 87
    empty_statement                          go to state 88
    expression_statement                     go to state 89
    switch_statement                         go to state 90
    do_statement                             go to state 91
    break_statement                          go to state 92
    continue_statement                       go to state 93
    goto_statement                           go to state 94
    return_statement                         go to state 95


state 144

    3 identifier: . ID
   49 expression: . assignment_expression
   50 assignment_expression: . conditional_expression
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   64 argument_list: . expression argument_list_
   65              | . argument_list_
   66 argument_list_: . VIRGULA expression argument_list_
   67               | .  [CLOSE_PAREN]
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  175                  | identifier OPEN_PAREN . argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    VIRGULA     shift, and go to state 237
    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    $default  reduce using rule 67 (argument_list_)

    identifier                  go to state 110
    expression                  go to state 238
    assignment_expression       go to state 127
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    argument_list               go to state 239
    argument_list_              go to state 240
    conditional_expression      go to state 128
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 145

    7 block: BEG block_statements END .

    $default  reduce using rule 7 (block)


state 146

    8 block_statements: block_statement block_statements_ .  [BEG, END, PT_VIRGULA, INCREMENT, DECREMENT, FOR, IF, WHILE, CASE, SWITCH, DEFAULT, DO, BREAK, CONTINUE, GOTO, RETURN, TYPE_INT, TYPE_SHORT, TYPE_LONG, TYPE_BYTE, TYPE_BOOL, TYPE_FLOAT, TYPE_DOUBLE, TYPE_CHAR, TYPE_STRING, ID, LITERAL]
   10 block_statements_: block_statement block_statements_ .  [BEG, END, PT_VIRGULA, INCREMENT, DECREMENT, FOR, IF, WHILE, CASE, SWITCH, DEFAULT, DO, BREAK, CONTINUE, GOTO, RETURN, TYPE_INT, TYPE_SHORT, TYPE_LONG, TYPE_BYTE, TYPE_BOOL, TYPE_FLOAT, TYPE_DOUBLE, TYPE_CHAR, TYPE_STRING, ID, LITERAL]

    BEG          reduce using rule 8 (block_statements)
    BEG          [reduce using rule 10 (block_statements_)]
    END          reduce using rule 8 (block_statements)
    END          [reduce using rule 10 (block_statements_)]
    PT_VIRGULA   reduce using rule 8 (block_statements)
    PT_VIRGULA   [reduce using rule 10 (block_statements_)]
    INCREMENT    reduce using rule 8 (block_statements)
    INCREMENT    [reduce using rule 10 (block_statements_)]
    DECREMENT    reduce using rule 8 (block_statements)
    DECREMENT    [reduce using rule 10 (block_statements_)]
    FOR          reduce using rule 8 (block_statements)
    FOR          [reduce using rule 10 (block_statements_)]
    IF           reduce using rule 8 (block_statements)
    IF           [reduce using rule 10 (block_statements_)]
    WHILE        reduce using rule 8 (block_statements)
    WHILE        [reduce using rule 10 (block_statements_)]
    CASE         reduce using rule 8 (block_statements)
    CASE         [reduce using rule 10 (block_statements_)]
    SWITCH       reduce using rule 8 (block_statements)
    SWITCH       [reduce using rule 10 (block_statements_)]
    DEFAULT      reduce using rule 8 (block_statements)
    DEFAULT      [reduce using rule 10 (block_statements_)]
    DO           reduce using rule 8 (block_statements)
    DO           [reduce using rule 10 (block_statements_)]
    BREAK        reduce using rule 8 (block_statements)
    BREAK        [reduce using rule 10 (block_statements_)]
    CONTINUE     reduce using rule 8 (block_statements)
    CONTINUE     [reduce using rule 10 (block_statements_)]
    GOTO         reduce using rule 8 (block_statements)
    GOTO         [reduce using rule 10 (block_statements_)]
    RETURN       reduce using rule 8 (block_statements)
    RETURN       [reduce using rule 10 (block_statements_)]
    TYPE_INT     reduce using rule 8 (block_statements)
    TYPE_INT     [reduce using rule 10 (block_statements_)]
    TYPE_SHORT   reduce using rule 8 (block_statements)
    TYPE_SHORT   [reduce using rule 10 (block_statements_)]
    TYPE_LONG    reduce using rule 8 (block_statements)
    TYPE_LONG    [reduce using rule 10 (block_statements_)]
    TYPE_BYTE    reduce using rule 8 (block_statements)
    TYPE_BYTE    [reduce using rule 10 (block_statements_)]
    TYPE_BOOL    reduce using rule 8 (block_statements)
    TYPE_BOOL    [reduce using rule 10 (block_statements_)]
    TYPE_FLOAT   reduce using rule 8 (block_statements)
    TYPE_FLOAT   [reduce using rule 10 (block_statements_)]
    TYPE_DOUBLE  reduce using rule 8 (block_statements)
    TYPE_DOUBLE  [reduce using rule 10 (block_statements_)]
    TYPE_CHAR    reduce using rule 8 (block_statements)
    TYPE_CHAR    [reduce using rule 10 (block_statements_)]
    TYPE_STRING  reduce using rule 8 (block_statements)
    TYPE_STRING  [reduce using rule 10 (block_statements_)]
    ID           reduce using rule 8 (block_statements)
    ID           [reduce using rule 10 (block_statements_)]
    LITERAL      reduce using rule 8 (block_statements)
    LITERAL      [reduce using rule 10 (block_statements_)]
    $default     reduce using rule 8 (block_statements)


state 147

    3 identifier: . ID
    7 block: . BEG block_statements END
   10 block_statements_: . block_statement block_statements_
   10                  | block_statement . block_statements_
   11                  | .  [BEG, END, PT_VIRGULA, INCREMENT, DECREMENT, FOR, IF, WHILE, CASE, SWITCH, DEFAULT, DO, BREAK, CONTINUE, GOTO, RETURN, TYPE_INT, TYPE_SHORT, TYPE_LONG, TYPE_BYTE, TYPE_BOOL, TYPE_FLOAT, TYPE_DOUBLE, TYPE_CHAR, TYPE_STRING, ID, LITERAL]
   12 block_statement: . local_variable_declaration_statement
   13                | . statement
   14 local_variable_declaration_statement: . local_variable_declaration PT_VIRGULA local_variable_declaration_
   17 local_variable_declaration: . primitive_type variable_declarators
   18                           | . primitive_type OPEN_COLC CLOSE_COLC variable_declarators
   19 primitive_type: . numeric_type
   20               | . TYPE_BOOL
   21               | . TYPE_STRING
   22 numeric_type: . integral_type
   23             | . floating_point_type
   24 integral_type: . TYPE_BYTE
   25              | . TYPE_SHORT
   26              | . TYPE_INT
   27              | . TYPE_LONG
   28              | . TYPE_CHAR
   29 floating_point_type: . TYPE_FLOAT
   30                    | . TYPE_DOUBLE
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  151 postfix_expression: . primary_no_new_array postfix_expression_
  155 statement: . statement_without_trailing_substatement
  156          | . identifier TWO_POINTS statement
  157          | . IF OPEN_PAREN expression CLOSE_PAREN optional_else
  158          | . WHILE OPEN_PAREN expression CLOSE_PAREN statement
  159          | . FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement
  168 statement_expression: . primary_no_new_array assignment_operator assignment_expression
  169                     | . preincrement_expression
  170                     | . post_incr_decrement_expression
  171                     | . predecrement_expression
  172 preincrement_expression: . INCREMENT unary_expression
  173 post_incr_decrement_expression: . postfix_expression
  174 predecrement_expression: . DECREMENT unary_expression
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  183 statement_without_trailing_substatement: . block
  184                                        | . empty_statement
  185                                        | . expression_statement
  186                                        | . switch_statement
  187                                        | . do_statement
  188                                        | . break_statement
  189                                        | . continue_statement
  190                                        | . goto_statement
  191                                        | . return_statement
  192 empty_statement: . PT_VIRGULA
  193 expression_statement: . statement_expression PT_VIRGULA
  194 switch_statement: . SWITCH OPEN_PAREN expression CLOSE_PAREN switch_block
  207 do_statement: . DO statement WHILE OPEN_PAREN expression CLOSE_PAREN PT_VIRGULA
  208 break_statement: . BREAK identifier_opt PT_VIRGULA
  209 continue_statement: . CONTINUE identifier_opt PT_VIRGULA
  210 goto_statement: . GOTO identifier_opt PT_VIRGULA
  211 return_statement: . RETURN expression_opt PT_VIRGULA

    BEG          shift, and go to state 44
    PT_VIRGULA   shift, and go to state 56
    INCREMENT    shift, and go to state 57
    DECREMENT    shift, and go to state 58
    FOR          shift, and go to state 59
    IF           shift, and go to state 60
    WHILE        shift, and go to state 61
    SWITCH       shift, and go to state 62
    DO           shift, and go to state 63
    BREAK        shift, and go to state 64
    CONTINUE     shift, and go to state 65
    GOTO         shift, and go to state 66
    RETURN       shift, and go to state 67
    TYPE_INT     shift, and go to state 14
    TYPE_SHORT   shift, and go to state 15
    TYPE_LONG    shift, and go to state 16
    TYPE_BYTE    shift, and go to state 17
    TYPE_BOOL    shift, and go to state 18
    TYPE_FLOAT   shift, and go to state 19
    TYPE_DOUBLE  shift, and go to state 20
    TYPE_CHAR    shift, and go to state 21
    TYPE_STRING  shift, and go to state 22
    ID           shift, and go to state 4
    LITERAL      shift, and go to state 68

    BEG          [reduce using rule 11 (block_statements_)]
    PT_VIRGULA   [reduce using rule 11 (block_statements_)]
    INCREMENT    [reduce using rule 11 (block_statements_)]
    DECREMENT    [reduce using rule 11 (block_statements_)]
    FOR          [reduce using rule 11 (block_statements_)]
    IF           [reduce using rule 11 (block_statements_)]
    WHILE        [reduce using rule 11 (block_statements_)]
    SWITCH       [reduce using rule 11 (block_statements_)]
    DO           [reduce using rule 11 (block_statements_)]
    BREAK        [reduce using rule 11 (block_statements_)]
    CONTINUE     [reduce using rule 11 (block_statements_)]
    GOTO         [reduce using rule 11 (block_statements_)]
    RETURN       [reduce using rule 11 (block_statements_)]
    TYPE_INT     [reduce using rule 11 (block_statements_)]
    TYPE_SHORT   [reduce using rule 11 (block_statements_)]
    TYPE_LONG    [reduce using rule 11 (block_statements_)]
    TYPE_BYTE    [reduce using rule 11 (block_statements_)]
    TYPE_BOOL    [reduce using rule 11 (block_statements_)]
    TYPE_FLOAT   [reduce using rule 11 (block_statements_)]
    TYPE_DOUBLE  [reduce using rule 11 (block_statements_)]
    TYPE_CHAR    [reduce using rule 11 (block_statements_)]
    TYPE_STRING  [reduce using rule 11 (block_statements_)]
    ID           [reduce using rule 11 (block_statements_)]
    LITERAL      [reduce using rule 11 (block_statements_)]
    $default     reduce using rule 11 (block_statements_)

    identifier                               go to state 69
    block                                    go to state 70
    block_statements_                        go to state 241
    block_statement                          go to state 147
    local_variable_declaration_statement     go to state 74
    local_variable_declaration               go to state 75
    primitive_type                           go to state 76
    numeric_type                             go to state 27
    integral_type                            go to state 28
    floating_point_type                      go to state 29
    field_access                             go to state 77
    array_access                             go to state 78
    primary_no_new_array                     go to state 79
    postfix_expression                       go to state 80
    statement                                go to state 81
    statement_expression                     go to state 82
    preincrement_expression                  go to state 83
    post_incr_decrement_expression           go to state 84
    predecrement_expression                  go to state 85
    method_invocation                        go to state 86
    statement_without_trailing_substatement  go to state 87
    empty_statement                          go to state 88
    expression_statement                     go to state 89
    switch_statement                         go to state 90
    do_statement                             go to state 91
    break_statement                          go to state 92
    continue_statement                       go to state 93
    goto_statement                           go to state 94
    return_statement                         go to state 95


state 148

   14 local_variable_declaration_statement: local_variable_declaration PT_VIRGULA . local_variable_declaration_
   15 local_variable_declaration_: . local_variable_declaration PT_VIRGULA
   16                            | .  [BEG, END, PT_VIRGULA, INCREMENT, DECREMENT, FOR, IF, WHILE, CASE, SWITCH, DEFAULT, DO, BREAK, CONTINUE, GOTO, RETURN, TYPE_INT, TYPE_SHORT, TYPE_LONG, TYPE_BYTE, TYPE_BOOL, TYPE_FLOAT, TYPE_DOUBLE, TYPE_CHAR, TYPE_STRING, ID, LITERAL]
   17 local_variable_declaration: . primitive_type variable_declarators
   18                           | . primitive_type OPEN_COLC CLOSE_COLC variable_declarators
   19 primitive_type: . numeric_type
   20               | . TYPE_BOOL
   21               | . TYPE_STRING
   22 numeric_type: . integral_type
   23             | . floating_point_type
   24 integral_type: . TYPE_BYTE
   25              | . TYPE_SHORT
   26              | . TYPE_INT
   27              | . TYPE_LONG
   28              | . TYPE_CHAR
   29 floating_point_type: . TYPE_FLOAT
   30                    | . TYPE_DOUBLE

    TYPE_INT     shift, and go to state 14
    TYPE_SHORT   shift, and go to state 15
    TYPE_LONG    shift, and go to state 16
    TYPE_BYTE    shift, and go to state 17
    TYPE_BOOL    shift, and go to state 18
    TYPE_FLOAT   shift, and go to state 19
    TYPE_DOUBLE  shift, and go to state 20
    TYPE_CHAR    shift, and go to state 21
    TYPE_STRING  shift, and go to state 22

    TYPE_INT     [reduce using rule 16 (local_variable_declaration_)]
    TYPE_SHORT   [reduce using rule 16 (local_variable_declaration_)]
    TYPE_LONG    [reduce using rule 16 (local_variable_declaration_)]
    TYPE_BYTE    [reduce using rule 16 (local_variable_declaration_)]
    TYPE_BOOL    [reduce using rule 16 (local_variable_declaration_)]
    TYPE_FLOAT   [reduce using rule 16 (local_variable_declaration_)]
    TYPE_DOUBLE  [reduce using rule 16 (local_variable_declaration_)]
    TYPE_CHAR    [reduce using rule 16 (local_variable_declaration_)]
    TYPE_STRING  [reduce using rule 16 (local_variable_declaration_)]
    $default     reduce using rule 16 (local_variable_declaration_)

    local_variable_declaration_  go to state 242
    local_variable_declaration   go to state 243
    primitive_type               go to state 76
    numeric_type                 go to state 27
    integral_type                go to state 28
    floating_point_type          go to state 29


state 149

   18 local_variable_declaration: primitive_type OPEN_COLC . CLOSE_COLC variable_declarators

    CLOSE_COLC  shift, and go to state 244


state 150

   17 local_variable_declaration: primitive_type variable_declarators .

    $default  reduce using rule 17 (local_variable_declaration)


state 151

    3 identifier: . ID
   49 expression: . assignment_expression
   50 assignment_expression: . conditional_expression
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   64 argument_list: . expression argument_list_
   65              | . argument_list_
   66 argument_list_: . VIRGULA expression argument_list_
   67               | .  [CLOSE_PAREN]
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  176                  | field_access OPEN_PAREN . argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    VIRGULA     shift, and go to state 237
    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    $default  reduce using rule 67 (argument_list_)

    identifier                  go to state 110
    expression                  go to state 238
    assignment_expression       go to state 127
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    argument_list               go to state 245
    argument_list_              go to state 240
    conditional_expression      go to state 128
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 152

    3 identifier: . ID
   49 expression: . assignment_expression
   50 assignment_expression: . conditional_expression
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   58             | primary_no_new_array OPEN_COLC . expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    expression                  go to state 246
    assignment_expression       go to state 127
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 128
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 153

   54 assignment_operator: EQUAL .

    $default  reduce using rule 54 (assignment_operator)


state 154

  152 postfix_expression_: . INCREMENT postfix_expression_
  152                    | INCREMENT . postfix_expression_
  153                    | . DECREMENT postfix_expression_
  154                    | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN, OR, OR_EXC, AND, PLUS, MINUS, MULT, DIV, MOD, EQUALOP, RELOP, SHIFTS]

    INCREMENT  shift, and go to state 154
    DECREMENT  shift, and go to state 155

    $default  reduce using rule 154 (postfix_expression_)

    postfix_expression_  go to state 247


state 155

  152 postfix_expression_: . INCREMENT postfix_expression_
  153                    | . DECREMENT postfix_expression_
  153                    | DECREMENT . postfix_expression_
  154                    | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN, OR, OR_EXC, AND, PLUS, MINUS, MULT, DIV, MOD, EQUALOP, RELOP, SHIFTS]

    INCREMENT  shift, and go to state 154
    DECREMENT  shift, and go to state 155

    $default  reduce using rule 154 (postfix_expression_)

    postfix_expression_  go to state 248


state 156

   56 assignment_operator: SHIFT_ASSIGN .

    $default  reduce using rule 56 (assignment_operator)


state 157

   55 assignment_operator: ARITH_ASSIGN .

    $default  reduce using rule 55 (assignment_operator)


state 158

   57 assignment_operator: LOGIC_ASSIGN .

    $default  reduce using rule 57 (assignment_operator)


state 159

    3 identifier: . ID
   50 assignment_expression: . conditional_expression
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  168 statement_expression: primary_no_new_array assignment_operator . assignment_expression
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    assignment_expression       go to state 249
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 128
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 160

  151 postfix_expression: primary_no_new_array postfix_expression_ .

    $default  reduce using rule 151 (postfix_expression)


state 161

  193 expression_statement: statement_expression PT_VIRGULA .

    $default  reduce using rule 193 (expression_statement)


state 162

   19 primitive_type: . numeric_type
   20               | . TYPE_BOOL
   21               | . TYPE_STRING
   22 numeric_type: . integral_type
   23             | . floating_point_type
   24 integral_type: . TYPE_BYTE
   25              | . TYPE_SHORT
   26              | . TYPE_INT
   27              | . TYPE_LONG
   28              | . TYPE_CHAR
   29 floating_point_type: . TYPE_FLOAT
   30                    | . TYPE_DOUBLE
  146 array_type: . primitive_type OPEN_COLC CLOSE_COLC
  237 formal_parameter_list_: VIRGULA . formal_parameter formal_parameter_list_
  239 formal_parameter: . primitive_type variable_declarator_id
  240                 | . array_type variable_declarator_id

    TYPE_INT     shift, and go to state 14
    TYPE_SHORT   shift, and go to state 15
    TYPE_LONG    shift, and go to state 16
    TYPE_BYTE    shift, and go to state 17
    TYPE_BOOL    shift, and go to state 18
    TYPE_FLOAT   shift, and go to state 19
    TYPE_DOUBLE  shift, and go to state 20
    TYPE_CHAR    shift, and go to state 21
    TYPE_STRING  shift, and go to state 22

    primitive_type       go to state 163
    numeric_type         go to state 27
    integral_type        go to state 28
    floating_point_type  go to state 29
    array_type           go to state 164
    formal_parameter     go to state 250


state 163

    3 identifier: . ID
   37 variable_declarator_id: . identifier
  146 array_type: primitive_type . OPEN_COLC CLOSE_COLC
  239 formal_parameter: primitive_type . variable_declarator_id

    OPEN_COLC  shift, and go to state 43
    ID         shift, and go to state 4

    identifier              go to state 98
    variable_declarator_id  go to state 251


state 164

    3 identifier: . ID
   37 variable_declarator_id: . identifier
  240 formal_parameter: array_type . variable_declarator_id

    ID  shift, and go to state 4

    identifier              go to state 98
    variable_declarator_id  go to state 252


state 165

  231 method_declarator: identifier OPEN_PAREN formal_parameter_list . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 253


state 166

  236 formal_parameter_list: formal_parameter_list_ .

    $default  reduce using rule 236 (formal_parameter_list)


state 167

  235 formal_parameter_list: formal_parameter . formal_parameter_list_
  237 formal_parameter_list_: . VIRGULA formal_parameter formal_parameter_list_
  238                       | .  [CLOSE_PAREN]

    VIRGULA  shift, and go to state 162

    $default  reduce using rule 238 (formal_parameter_list_)

    formal_parameter_list_  go to state 254


state 168

    3 identifier: . ID
   31 variable_declarators: . variable_declarator variable_declarators_
   32 variable_declarator: . variable_declarator_id variable_declarator_
   37 variable_declarator_id: . identifier
  242 field_declaration: field_modifiers_ primitive_type OPEN_COLC CLOSE_COLC . variable_declarators PT_VIRGULA

    ID  shift, and go to state 4

    identifier              go to state 98
    variable_declarators    go to state 255
    variable_declarator     go to state 100
    variable_declarator_id  go to state 101


state 169

  241 field_declaration: field_modifiers_ primitive_type variable_declarators PT_VIRGULA .

    $default  reduce using rule 241 (field_declaration)


state 170

    3 identifier: . ID
   32 variable_declarator: . variable_declarator_id variable_declarator_
   33 variable_declarators_: VIRGULA . variable_declarator variable_declarators_
   37 variable_declarator_id: . identifier

    ID  shift, and go to state 4

    identifier              go to state 98
    variable_declarator     go to state 256
    variable_declarator_id  go to state 101


state 171

   31 variable_declarators: variable_declarator variable_declarators_ .

    $default  reduce using rule 31 (variable_declarators)


state 172

    3 identifier: . ID
   35 variable_declarator_: EQUAL . variable_initializer
   38 variable_initializer: . assignment_expression
   39                     | . array_initializer
   40                     | . left_hand_side
   41 array_initializer: . BEG variable_initializers virgula_opt END
   42                  | . array_creation_expression
   50 assignment_expression: . conditional_expression
   51 field_access: . identifier POINT identifier
   52 left_hand_side: . field_access
   53               | . array_access
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   68 array_creation_expression: . NEW primitive_type dim_exprs dims
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    BEG         shift, and go to state 257
    OPEN_PAREN  shift, and go to state 125
    NEW         shift, and go to state 258
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    variable_initializer        go to state 259
    array_initializer           go to state 260
    assignment_expression       go to state 261
    field_access                go to state 262
    left_hand_side              go to state 263
    array_access                go to state 264
    primary_no_new_array        go to state 111
    array_creation_expression   go to state 265
    conditional_expression      go to state 128
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 173

   32 variable_declarator: variable_declarator_id variable_declarator_ .

    $default  reduce using rule 32 (variable_declarator)


state 174

    6 static_initializer: PUBLIC STATIC VOID MAIN . OPEN_PAREN TYPE_STRING OPEN_COLC CLOSE_COLC ARGS CLOSE_PAREN block

    OPEN_PAREN  shift, and go to state 266


state 175

   51 field_access: identifier . POINT identifier
   63 primary_no_new_array: identifier .  [OPEN_COLC, QUESTION_MARK, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN, OR, OR_EXC, AND, PLUS, MINUS, MULT, DIV, MOD, INCREMENT, DECREMENT, EQUALOP, RELOP, SHIFTS]
  145 class_type: identifier .  [CLOSE_PAREN]
  175 method_invocation: identifier . OPEN_PAREN argument_list CLOSE_PAREN

    POINT       shift, and go to state 142
    OPEN_PAREN  shift, and go to state 144

    OPEN_PAREN   [reduce using rule 63 (primary_no_new_array)]
    CLOSE_PAREN  reduce using rule 63 (primary_no_new_array)
    CLOSE_PAREN  [reduce using rule 145 (class_type)]
    $default     reduce using rule 63 (primary_no_new_array)


state 176

  141 cast_expression: OPEN_PAREN primitive_type . CLOSE_PAREN unary_expression
  146 array_type: primitive_type . OPEN_COLC CLOSE_COLC

    OPEN_COLC    shift, and go to state 43
    CLOSE_PAREN  shift, and go to state 267


state 177

  140 unary_expression: OPEN_PAREN conditional_expression . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 268


state 178

  142 cast_expression: OPEN_PAREN reference_type . CLOSE_PAREN unary_expression_not_plus_minus

    CLOSE_PAREN  shift, and go to state 269


state 179

  143 reference_type: class_type .

    $default  reduce using rule 143 (reference_type)


state 180

  144 reference_type: array_type .

    $default  reduce using rule 144 (reference_type)


state 181

  134 unary_expression: PLUS unary_expression .

    $default  reduce using rule 134 (unary_expression)


state 182

  135 unary_expression: MINUS unary_expression .

    $default  reduce using rule 135 (unary_expression)


state 183

  132 unary_expression: INCREMENT unary_expression .

    $default  reduce using rule 132 (unary_expression)


state 184

  133 unary_expression: DECREMENT unary_expression .

    $default  reduce using rule 133 (unary_expression)


state 185

  137 unary_expression: NOT unary_expression .

    $default  reduce using rule 137 (unary_expression)


state 186

  138 unary_expression: NOT_BIT unary_expression .

    $default  reduce using rule 138 (unary_expression)


state 187

  163 for_init: local_variable_declaration .

    $default  reduce using rule 163 (for_init)


state 188

  159 statement: FOR OPEN_PAREN for_init . PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement

    PT_VIRGULA  shift, and go to state 270


state 189

  162 for_init: statement_expression_list .

    $default  reduce using rule 162 (for_init)


state 190

  165 statement_expression_list: statement_expression . statement_expression_list_
  166 statement_expression_list_: . VIRGULA statement_expression statement_expression_list_
  167                           | .  [PT_VIRGULA, CLOSE_PAREN]

    VIRGULA  shift, and go to state 271

    $default  reduce using rule 167 (statement_expression_list_)

    statement_expression_list_  go to state 272


state 191

  157 statement: IF OPEN_PAREN expression . CLOSE_PAREN optional_else

    CLOSE_PAREN  shift, and go to state 273


state 192

  158 statement: WHILE OPEN_PAREN expression . CLOSE_PAREN statement

    CLOSE_PAREN  shift, and go to state 274


state 193

  194 switch_statement: SWITCH OPEN_PAREN expression . CLOSE_PAREN switch_block

    CLOSE_PAREN  shift, and go to state 275


state 194

  207 do_statement: DO statement WHILE . OPEN_PAREN expression CLOSE_PAREN PT_VIRGULA

    OPEN_PAREN  shift, and go to state 276


state 195

  208 break_statement: BREAK identifier_opt PT_VIRGULA .

    $default  reduce using rule 208 (break_statement)


state 196

  209 continue_statement: CONTINUE identifier_opt PT_VIRGULA .

    $default  reduce using rule 209 (continue_statement)


state 197

  210 goto_statement: GOTO identifier_opt PT_VIRGULA .

    $default  reduce using rule 210 (goto_statement)


state 198

   74 conditional_expression: conditional_or_expression .  [CLOSE_PAREN]
   75                       | OPEN_PAREN conditional_or_expression . CLOSE_PAREN conditional_opt
   76                       | conditional_or_expression . QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | OPEN_PAREN conditional_or_expression . CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression

    QUESTION_MARK  shift, and go to state 199
    CLOSE_PAREN    shift, and go to state 277

    CLOSE_PAREN  [reduce using rule 74 (conditional_expression)]


state 199

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   76                       | conditional_or_expression QUESTION_MARK . conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 278
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 200

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   91 conditional_or_expression_: OR_LOGIC . conditional_and_expression conditional_or_expression_
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 103
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_and_expression  go to state 279
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 201

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   90                          | conditional_and_expression OPEN_PAREN . conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 280
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 202

   89 conditional_or_expression: conditional_and_expression conditional_or_expression_ .

    $default  reduce using rule 89 (conditional_or_expression)


state 203

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   95 conditional_and_expression_: AND_LOGIC . inclusive_or_expression conditional_and_expression_
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 103
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                 go to state 110
    field_access               go to state 77
    array_access               go to state 78
    primary_no_new_array       go to state 111
    inclusive_or_expression    go to state 281
    exclusive_or_expression    go to state 132
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    unary_expression           go to state 139
    cast_expression            go to state 113
    postfix_expression         go to state 114
    method_invocation          go to state 86


state 204

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   94                           | inclusive_or_expression OPEN_PAREN . conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 282
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 205

   93 conditional_and_expression: inclusive_or_expression conditional_and_expression_ .

    $default  reduce using rule 93 (conditional_and_expression)


state 206

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   98                        | exclusive_or_expression OPEN_PAREN . conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 283
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 207

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   99 inclusive_or_expression_: OR . exclusive_or_expression inclusive_or_expression_
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 103
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                 go to state 110
    field_access               go to state 77
    array_access               go to state 78
    primary_no_new_array       go to state 111
    exclusive_or_expression    go to state 284
    and_expression             go to state 133
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    unary_expression           go to state 139
    cast_expression            go to state 113
    postfix_expression         go to state 114
    method_invocation          go to state 86


state 208

   97 inclusive_or_expression: exclusive_or_expression inclusive_or_expression_ .

    $default  reduce using rule 97 (inclusive_or_expression)


state 209

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  102                        | and_expression OPEN_PAREN . conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 285
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 210

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  103 exclusive_or_expression_: OR_EXC . and_expression exclusive_or_expression_
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 103
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                 go to state 110
    field_access               go to state 77
    array_access               go to state 78
    primary_no_new_array       go to state 111
    and_expression             go to state 286
    equality_expression        go to state 134
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    unary_expression           go to state 139
    cast_expression            go to state 113
    postfix_expression         go to state 114
    method_invocation          go to state 86


state 211

  101 exclusive_or_expression: and_expression exclusive_or_expression_ .

    $default  reduce using rule 101 (exclusive_or_expression)


state 212

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  106               | equality_expression OPEN_PAREN . conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 287
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 213

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  107 and_expression_: AND . equality_expression and_expression_
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 103
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                 go to state 110
    field_access               go to state 77
    array_access               go to state 78
    primary_no_new_array       go to state 111
    equality_expression        go to state 288
    relational_expression      go to state 135
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    unary_expression           go to state 139
    cast_expression            go to state 113
    postfix_expression         go to state 114
    method_invocation          go to state 86


state 214

  105 and_expression: equality_expression and_expression_ .

    $default  reduce using rule 105 (and_expression)


state 215

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  110                    | relational_expression OPEN_PAREN . conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 289
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 216

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  111 equality_expression_: EQUALOP . relational_expression equality_expression_
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 103
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                 go to state 110
    field_access               go to state 77
    array_access               go to state 78
    primary_no_new_array       go to state 111
    relational_expression      go to state 290
    shift_expression           go to state 136
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    unary_expression           go to state 139
    cast_expression            go to state 113
    postfix_expression         go to state 114
    method_invocation          go to state 86


state 217

  109 equality_expression: relational_expression equality_expression_ .

    $default  reduce using rule 109 (equality_expression)


state 218

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  114                      | shift_expression OPEN_PAREN . conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 291
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 219

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  115 relational_expression_: RELOP . shift_expression relational_expression_
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 103
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                 go to state 110
    field_access               go to state 77
    array_access               go to state 78
    primary_no_new_array       go to state 111
    shift_expression           go to state 292
    additive_expression        go to state 137
    multiplicative_expression  go to state 138
    unary_expression           go to state 139
    cast_expression            go to state 113
    postfix_expression         go to state 114
    method_invocation          go to state 86


state 220

  113 relational_expression: shift_expression relational_expression_ .

    $default  reduce using rule 113 (relational_expression)


state 221

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  118                 | additive_expression OPEN_PAREN . conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 293
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 222

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  119 shift_expression_: SHIFTS . additive_expression shift_expression_
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 103
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                 go to state 110
    field_access               go to state 77
    array_access               go to state 78
    primary_no_new_array       go to state 111
    additive_expression        go to state 294
    multiplicative_expression  go to state 138
    unary_expression           go to state 139
    cast_expression            go to state 113
    postfix_expression         go to state 114
    method_invocation          go to state 86


state 223

  117 shift_expression: additive_expression shift_expression_ .

    $default  reduce using rule 117 (shift_expression)


state 224

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  122                    | multiplicative_expression OPEN_PAREN . conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 295
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 225

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  123 additive_expression_: PLUS . multiplicative_expression additive_expression_
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 103
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                 go to state 110
    field_access               go to state 77
    array_access               go to state 78
    primary_no_new_array       go to state 111
    multiplicative_expression  go to state 296
    unary_expression           go to state 139
    cast_expression            go to state 113
    postfix_expression         go to state 114
    method_invocation          go to state 86


state 226

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  124 additive_expression_: MINUS . multiplicative_expression additive_expression_
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 103
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                 go to state 110
    field_access               go to state 77
    array_access               go to state 78
    primary_no_new_array       go to state 111
    multiplicative_expression  go to state 297
    unary_expression           go to state 139
    cast_expression            go to state 113
    postfix_expression         go to state 114
    method_invocation          go to state 86


state 227

  121 additive_expression: multiplicative_expression additive_expression_ .

    $default  reduce using rule 121 (additive_expression)


state 228

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  127                          | unary_expression OPEN_PAREN . conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 298
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 229

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  128 multiplicative_expression_: MULT . unary_expression multiplicative_expression_
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 103
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier            go to state 110
    field_access          go to state 77
    array_access          go to state 78
    primary_no_new_array  go to state 111
    unary_expression      go to state 299
    cast_expression       go to state 113
    postfix_expression    go to state 114
    method_invocation     go to state 86


state 230

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  129 multiplicative_expression_: DIV . unary_expression multiplicative_expression_
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 103
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier            go to state 110
    field_access          go to state 77
    array_access          go to state 78
    primary_no_new_array  go to state 111
    unary_expression      go to state 300
    cast_expression       go to state 113
    postfix_expression    go to state 114
    method_invocation     go to state 86


state 231

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  130 multiplicative_expression_: MOD . unary_expression multiplicative_expression_
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 103
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier            go to state 110
    field_access          go to state 77
    array_access          go to state 78
    primary_no_new_array  go to state 111
    unary_expression      go to state 301
    cast_expression       go to state 113
    postfix_expression    go to state 114
    method_invocation     go to state 86


state 232

  126 multiplicative_expression: unary_expression multiplicative_expression_ .

    $default  reduce using rule 126 (multiplicative_expression)


state 233

  211 return_statement: RETURN expression_opt PT_VIRGULA .

    $default  reduce using rule 211 (return_statement)


state 234

  177 method_invocation: LITERAL POINT identifier . OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 302


state 235

   51 field_access: identifier POINT identifier .

    $default  reduce using rule 51 (field_access)


state 236

  156 statement: identifier TWO_POINTS statement .

    $default  reduce using rule 156 (statement)


state 237

    3 identifier: . ID
   49 expression: . assignment_expression
   50 assignment_expression: . conditional_expression
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   66 argument_list_: VIRGULA . expression argument_list_
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    expression                  go to state 303
    assignment_expression       go to state 127
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 128
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 238

   64 argument_list: expression . argument_list_
   66 argument_list_: . VIRGULA expression argument_list_
   67               | .  [CLOSE_PAREN]

    VIRGULA  shift, and go to state 237

    $default  reduce using rule 67 (argument_list_)

    argument_list_  go to state 304


state 239

  175 method_invocation: identifier OPEN_PAREN argument_list . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 305


state 240

   65 argument_list: argument_list_ .

    $default  reduce using rule 65 (argument_list)


state 241

   10 block_statements_: block_statement block_statements_ .

    $default  reduce using rule 10 (block_statements_)


state 242

   14 local_variable_declaration_statement: local_variable_declaration PT_VIRGULA local_variable_declaration_ .

    $default  reduce using rule 14 (local_variable_declaration_statement)


state 243

   15 local_variable_declaration_: local_variable_declaration . PT_VIRGULA

    PT_VIRGULA  shift, and go to state 306


state 244

    3 identifier: . ID
   18 local_variable_declaration: primitive_type OPEN_COLC CLOSE_COLC . variable_declarators
   31 variable_declarators: . variable_declarator variable_declarators_
   32 variable_declarator: . variable_declarator_id variable_declarator_
   37 variable_declarator_id: . identifier

    ID  shift, and go to state 4

    identifier              go to state 98
    variable_declarators    go to state 307
    variable_declarator     go to state 100
    variable_declarator_id  go to state 101


state 245

  176 method_invocation: field_access OPEN_PAREN argument_list . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 308


state 246

   58 array_access: primary_no_new_array OPEN_COLC expression . CLOSE_COLC

    CLOSE_COLC  shift, and go to state 309


state 247

  152 postfix_expression_: INCREMENT postfix_expression_ .

    $default  reduce using rule 152 (postfix_expression_)


state 248

  153 postfix_expression_: DECREMENT postfix_expression_ .

    $default  reduce using rule 153 (postfix_expression_)


state 249

  168 statement_expression: primary_no_new_array assignment_operator assignment_expression .

    $default  reduce using rule 168 (statement_expression)


state 250

  237 formal_parameter_list_: . VIRGULA formal_parameter formal_parameter_list_
  237                       | VIRGULA formal_parameter . formal_parameter_list_
  238                       | .  [CLOSE_PAREN]

    VIRGULA  shift, and go to state 162

    $default  reduce using rule 238 (formal_parameter_list_)

    formal_parameter_list_  go to state 310


state 251

  239 formal_parameter: primitive_type variable_declarator_id .

    $default  reduce using rule 239 (formal_parameter)


state 252

  240 formal_parameter: array_type variable_declarator_id .

    $default  reduce using rule 240 (formal_parameter)


state 253

  231 method_declarator: identifier OPEN_PAREN formal_parameter_list CLOSE_PAREN .

    $default  reduce using rule 231 (method_declarator)


state 254

  235 formal_parameter_list: formal_parameter formal_parameter_list_ .

    $default  reduce using rule 235 (formal_parameter_list)


state 255

  242 field_declaration: field_modifiers_ primitive_type OPEN_COLC CLOSE_COLC variable_declarators . PT_VIRGULA

    PT_VIRGULA  shift, and go to state 311


state 256

   33 variable_declarators_: . VIRGULA variable_declarator variable_declarators_
   33                      | VIRGULA variable_declarator . variable_declarators_
   34                      | .  [PT_VIRGULA]

    VIRGULA  shift, and go to state 170

    $default  reduce using rule 34 (variable_declarators_)

    variable_declarators_  go to state 312


state 257

    3 identifier: . ID
   38 variable_initializer: . assignment_expression
   39                     | . array_initializer
   40                     | . left_hand_side
   41 array_initializer: . BEG variable_initializers virgula_opt END
   41                  | BEG . variable_initializers virgula_opt END
   42                  | . array_creation_expression
   45 variable_initializers: . variable_initializer variable_initializers_
   46                      | . variable_initializers_
   47 variable_initializers_: . VIRGULA variable_initializer variable_initializers_
   48                       | .  [END, VIRGULA]
   50 assignment_expression: . conditional_expression
   51 field_access: . identifier POINT identifier
   52 left_hand_side: . field_access
   53               | . array_access
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   68 array_creation_expression: . NEW primitive_type dim_exprs dims
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    BEG         shift, and go to state 257
    VIRGULA     shift, and go to state 313
    OPEN_PAREN  shift, and go to state 125
    NEW         shift, and go to state 258
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    VIRGULA   [reduce using rule 48 (variable_initializers_)]
    $default  reduce using rule 48 (variable_initializers_)

    identifier                  go to state 110
    variable_initializer        go to state 314
    array_initializer           go to state 260
    variable_initializers       go to state 315
    variable_initializers_      go to state 316
    assignment_expression       go to state 261
    field_access                go to state 262
    left_hand_side              go to state 263
    array_access                go to state 264
    primary_no_new_array        go to state 111
    array_creation_expression   go to state 265
    conditional_expression      go to state 128
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 258

   19 primitive_type: . numeric_type
   20               | . TYPE_BOOL
   21               | . TYPE_STRING
   22 numeric_type: . integral_type
   23             | . floating_point_type
   24 integral_type: . TYPE_BYTE
   25              | . TYPE_SHORT
   26              | . TYPE_INT
   27              | . TYPE_LONG
   28              | . TYPE_CHAR
   29 floating_point_type: . TYPE_FLOAT
   30                    | . TYPE_DOUBLE
   68 array_creation_expression: NEW . primitive_type dim_exprs dims

    TYPE_INT     shift, and go to state 14
    TYPE_SHORT   shift, and go to state 15
    TYPE_LONG    shift, and go to state 16
    TYPE_BYTE    shift, and go to state 17
    TYPE_BOOL    shift, and go to state 18
    TYPE_FLOAT   shift, and go to state 19
    TYPE_DOUBLE  shift, and go to state 20
    TYPE_CHAR    shift, and go to state 21
    TYPE_STRING  shift, and go to state 22

    primitive_type       go to state 317
    numeric_type         go to state 27
    integral_type        go to state 28
    floating_point_type  go to state 29


state 259

   35 variable_declarator_: EQUAL variable_initializer .

    $default  reduce using rule 35 (variable_declarator_)


state 260

   39 variable_initializer: array_initializer .

    $default  reduce using rule 39 (variable_initializer)


state 261

   38 variable_initializer: assignment_expression .

    $default  reduce using rule 38 (variable_initializer)


state 262

   52 left_hand_side: field_access .  [END, PT_VIRGULA, VIRGULA]
   60 primary_no_new_array: field_access .  [END, PT_VIRGULA, OPEN_COLC, VIRGULA, QUESTION_MARK, OR_LOGIC, AND_LOGIC, OPEN_PAREN, OR, OR_EXC, AND, PLUS, MINUS, MULT, DIV, MOD, INCREMENT, DECREMENT, EQUALOP, RELOP, SHIFTS]
  176 method_invocation: field_access . OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 151

    END         reduce using rule 52 (left_hand_side)
    END         [reduce using rule 60 (primary_no_new_array)]
    PT_VIRGULA  reduce using rule 52 (left_hand_side)
    PT_VIRGULA  [reduce using rule 60 (primary_no_new_array)]
    VIRGULA     reduce using rule 52 (left_hand_side)
    VIRGULA     [reduce using rule 60 (primary_no_new_array)]
    OPEN_PAREN  [reduce using rule 60 (primary_no_new_array)]
    $default    reduce using rule 60 (primary_no_new_array)


state 263

   40 variable_initializer: left_hand_side .

    $default  reduce using rule 40 (variable_initializer)


state 264

   53 left_hand_side: array_access .  [END, PT_VIRGULA, VIRGULA]
   62 primary_no_new_array: array_access .  [END, PT_VIRGULA, OPEN_COLC, VIRGULA, QUESTION_MARK, OR_LOGIC, AND_LOGIC, OPEN_PAREN, OR, OR_EXC, AND, PLUS, MINUS, MULT, DIV, MOD, INCREMENT, DECREMENT, EQUALOP, RELOP, SHIFTS]

    END         reduce using rule 53 (left_hand_side)
    END         [reduce using rule 62 (primary_no_new_array)]
    PT_VIRGULA  reduce using rule 53 (left_hand_side)
    PT_VIRGULA  [reduce using rule 62 (primary_no_new_array)]
    VIRGULA     reduce using rule 53 (left_hand_side)
    VIRGULA     [reduce using rule 62 (primary_no_new_array)]
    $default    reduce using rule 62 (primary_no_new_array)


state 265

   42 array_initializer: array_creation_expression .

    $default  reduce using rule 42 (array_initializer)


state 266

    6 static_initializer: PUBLIC STATIC VOID MAIN OPEN_PAREN . TYPE_STRING OPEN_COLC CLOSE_COLC ARGS CLOSE_PAREN block

    TYPE_STRING  shift, and go to state 318


state 267

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  141                | OPEN_PAREN primitive_type CLOSE_PAREN . unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 103
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier            go to state 110
    field_access          go to state 77
    array_access          go to state 78
    primary_no_new_array  go to state 111
    unary_expression      go to state 319
    cast_expression       go to state 113
    postfix_expression    go to state 114
    method_invocation     go to state 86


state 268

  140 unary_expression: OPEN_PAREN conditional_expression CLOSE_PAREN .

    $default  reduce using rule 140 (unary_expression)


state 269

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  142                | OPEN_PAREN reference_type CLOSE_PAREN . unary_expression_not_plus_minus
  147 unary_expression_not_plus_minus: . postfix_expression
  148                                | . NOT_BIT unary_expression
  149                                | . NOT unary_expression
  150                                | . cast_expression
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 320
    NOT         shift, and go to state 321
    NOT_BIT     shift, and go to state 322
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                       go to state 110
    field_access                     go to state 77
    array_access                     go to state 78
    primary_no_new_array             go to state 111
    cast_expression                  go to state 323
    unary_expression_not_plus_minus  go to state 324
    postfix_expression               go to state 325
    method_invocation                go to state 86


state 270

    3 identifier: . ID
   49 expression: . assignment_expression
   50 assignment_expression: . conditional_expression
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  159 statement: FOR OPEN_PAREN for_init PT_VIRGULA . expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  178 expression_opt: . expression
  179               | .  [PT_VIRGULA]

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    $default  reduce using rule 179 (expression_opt)

    identifier                  go to state 110
    expression                  go to state 126
    assignment_expression       go to state 127
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 128
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86
    expression_opt              go to state 326


state 271

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  151 postfix_expression: . primary_no_new_array postfix_expression_
  166 statement_expression_list_: VIRGULA . statement_expression statement_expression_list_
  168 statement_expression: . primary_no_new_array assignment_operator assignment_expression
  169                     | . preincrement_expression
  170                     | . post_incr_decrement_expression
  171                     | . predecrement_expression
  172 preincrement_expression: . INCREMENT unary_expression
  173 post_incr_decrement_expression: . postfix_expression
  174 predecrement_expression: . DECREMENT unary_expression
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    INCREMENT  shift, and go to state 57
    DECREMENT  shift, and go to state 58
    ID         shift, and go to state 4
    LITERAL    shift, and go to state 68

    identifier                      go to state 110
    field_access                    go to state 77
    array_access                    go to state 78
    primary_no_new_array            go to state 79
    postfix_expression              go to state 80
    statement_expression            go to state 327
    preincrement_expression         go to state 83
    post_incr_decrement_expression  go to state 84
    predecrement_expression         go to state 85
    method_invocation               go to state 86


state 272

  165 statement_expression_list: statement_expression statement_expression_list_ .

    $default  reduce using rule 165 (statement_expression_list)


state 273

    3 identifier: . ID
    7 block: . BEG block_statements END
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  151 postfix_expression: . primary_no_new_array postfix_expression_
  155 statement: . statement_without_trailing_substatement
  156          | . identifier TWO_POINTS statement
  157          | . IF OPEN_PAREN expression CLOSE_PAREN optional_else
  157          | IF OPEN_PAREN expression CLOSE_PAREN . optional_else
  158          | . WHILE OPEN_PAREN expression CLOSE_PAREN statement
  159          | . FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement
  160 optional_else: . statement
  161              | . statement_no_short_if ELSE statement
  168 statement_expression: . primary_no_new_array assignment_operator assignment_expression
  169                     | . preincrement_expression
  170                     | . post_incr_decrement_expression
  171                     | . predecrement_expression
  172 preincrement_expression: . INCREMENT unary_expression
  173 post_incr_decrement_expression: . postfix_expression
  174 predecrement_expression: . DECREMENT unary_expression
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  183 statement_without_trailing_substatement: . block
  184                                        | . empty_statement
  185                                        | . expression_statement
  186                                        | . switch_statement
  187                                        | . do_statement
  188                                        | . break_statement
  189                                        | . continue_statement
  190                                        | . goto_statement
  191                                        | . return_statement
  192 empty_statement: . PT_VIRGULA
  193 expression_statement: . statement_expression PT_VIRGULA
  194 switch_statement: . SWITCH OPEN_PAREN expression CLOSE_PAREN switch_block
  207 do_statement: . DO statement WHILE OPEN_PAREN expression CLOSE_PAREN PT_VIRGULA
  208 break_statement: . BREAK identifier_opt PT_VIRGULA
  209 continue_statement: . CONTINUE identifier_opt PT_VIRGULA
  210 goto_statement: . GOTO identifier_opt PT_VIRGULA
  211 return_statement: . RETURN expression_opt PT_VIRGULA
  214 statement_no_short_if: . statement_without_trailing_substatement
  215                      | . identifier TWO_POINTS statement_no_short_if
  216                      | . IF OPEN_PAREN expression CLOSE_PAREN statement_no_short_if ELSE statement_no_short_if
  217                      | . WHILE OPEN_PAREN expression CLOSE_PAREN statement_no_short_if
  218                      | . FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement_no_short_if

    BEG         shift, and go to state 44
    PT_VIRGULA  shift, and go to state 56
    INCREMENT   shift, and go to state 57
    DECREMENT   shift, and go to state 58
    FOR         shift, and go to state 328
    IF          shift, and go to state 329
    WHILE       shift, and go to state 330
    SWITCH      shift, and go to state 62
    DO          shift, and go to state 63
    BREAK       shift, and go to state 64
    CONTINUE    shift, and go to state 65
    GOTO        shift, and go to state 66
    RETURN      shift, and go to state 67
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                               go to state 331
    block                                    go to state 70
    field_access                             go to state 77
    array_access                             go to state 78
    primary_no_new_array                     go to state 79
    postfix_expression                       go to state 80
    statement                                go to state 332
    optional_else                            go to state 333
    statement_expression                     go to state 82
    preincrement_expression                  go to state 83
    post_incr_decrement_expression           go to state 84
    predecrement_expression                  go to state 85
    method_invocation                        go to state 86
    statement_without_trailing_substatement  go to state 334
    empty_statement                          go to state 88
    expression_statement                     go to state 89
    switch_statement                         go to state 90
    do_statement                             go to state 91
    break_statement                          go to state 92
    continue_statement                       go to state 93
    goto_statement                           go to state 94
    return_statement                         go to state 95
    statement_no_short_if                    go to state 335


state 274

    3 identifier: . ID
    7 block: . BEG block_statements END
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  151 postfix_expression: . primary_no_new_array postfix_expression_
  155 statement: . statement_without_trailing_substatement
  156          | . identifier TWO_POINTS statement
  157          | . IF OPEN_PAREN expression CLOSE_PAREN optional_else
  158          | . WHILE OPEN_PAREN expression CLOSE_PAREN statement
  158          | WHILE OPEN_PAREN expression CLOSE_PAREN . statement
  159          | . FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement
  168 statement_expression: . primary_no_new_array assignment_operator assignment_expression
  169                     | . preincrement_expression
  170                     | . post_incr_decrement_expression
  171                     | . predecrement_expression
  172 preincrement_expression: . INCREMENT unary_expression
  173 post_incr_decrement_expression: . postfix_expression
  174 predecrement_expression: . DECREMENT unary_expression
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  183 statement_without_trailing_substatement: . block
  184                                        | . empty_statement
  185                                        | . expression_statement
  186                                        | . switch_statement
  187                                        | . do_statement
  188                                        | . break_statement
  189                                        | . continue_statement
  190                                        | . goto_statement
  191                                        | . return_statement
  192 empty_statement: . PT_VIRGULA
  193 expression_statement: . statement_expression PT_VIRGULA
  194 switch_statement: . SWITCH OPEN_PAREN expression CLOSE_PAREN switch_block
  207 do_statement: . DO statement WHILE OPEN_PAREN expression CLOSE_PAREN PT_VIRGULA
  208 break_statement: . BREAK identifier_opt PT_VIRGULA
  209 continue_statement: . CONTINUE identifier_opt PT_VIRGULA
  210 goto_statement: . GOTO identifier_opt PT_VIRGULA
  211 return_statement: . RETURN expression_opt PT_VIRGULA

    BEG         shift, and go to state 44
    PT_VIRGULA  shift, and go to state 56
    INCREMENT   shift, and go to state 57
    DECREMENT   shift, and go to state 58
    FOR         shift, and go to state 59
    IF          shift, and go to state 60
    WHILE       shift, and go to state 61
    SWITCH      shift, and go to state 62
    DO          shift, and go to state 63
    BREAK       shift, and go to state 64
    CONTINUE    shift, and go to state 65
    GOTO        shift, and go to state 66
    RETURN      shift, and go to state 67
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                               go to state 69
    block                                    go to state 70
    field_access                             go to state 77
    array_access                             go to state 78
    primary_no_new_array                     go to state 79
    postfix_expression                       go to state 80
    statement                                go to state 336
    statement_expression                     go to state 82
    preincrement_expression                  go to state 83
    post_incr_decrement_expression           go to state 84
    predecrement_expression                  go to state 85
    method_invocation                        go to state 86
    statement_without_trailing_substatement  go to state 87
    empty_statement                          go to state 88
    expression_statement                     go to state 89
    switch_statement                         go to state 90
    do_statement                             go to state 91
    break_statement                          go to state 92
    continue_statement                       go to state 93
    goto_statement                           go to state 94
    return_statement                         go to state 95


state 275

  194 switch_statement: SWITCH OPEN_PAREN expression CLOSE_PAREN . switch_block
  195 switch_block: . BEG switch_block_statement_groups switch_labels END

    BEG  shift, and go to state 337

    switch_block  go to state 338


state 276

    3 identifier: . ID
   49 expression: . assignment_expression
   50 assignment_expression: . conditional_expression
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  207 do_statement: DO statement WHILE OPEN_PAREN . expression CLOSE_PAREN PT_VIRGULA

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    expression                  go to state 339
    assignment_expression       go to state 127
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 128
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 277

   75 conditional_expression: OPEN_PAREN conditional_or_expression CLOSE_PAREN . conditional_opt
   77                       | OPEN_PAREN conditional_or_expression CLOSE_PAREN . QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   78 conditional_opt: . conditional_or_expression_
   79                | . conditional_and_expression_
   80                | . inclusive_or_expression_
   81                | . exclusive_or_expression_
   82                | . and_expression_
   83                | . equality_expression_
   84                | . relational_expression_
   85                | . shift_expression_
   86                | . additive_expression_
   87                | . multiplicative_expression_
   88                | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, TWO_POINTS, CLOSE_PAREN]
   91 conditional_or_expression_: . OR_LOGIC conditional_and_expression conditional_or_expression_
   92                           | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, TWO_POINTS, CLOSE_PAREN]
   95 conditional_and_expression_: . AND_LOGIC inclusive_or_expression conditional_and_expression_
   96                            | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, TWO_POINTS, CLOSE_PAREN]
   99 inclusive_or_expression_: . OR exclusive_or_expression inclusive_or_expression_
  100                         | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, TWO_POINTS, CLOSE_PAREN]
  103 exclusive_or_expression_: . OR_EXC and_expression exclusive_or_expression_
  104                         | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, TWO_POINTS, CLOSE_PAREN]
  107 and_expression_: . AND equality_expression and_expression_
  108                | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, TWO_POINTS, CLOSE_PAREN]
  111 equality_expression_: . EQUALOP relational_expression equality_expression_
  112                     | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, TWO_POINTS, CLOSE_PAREN]
  115 relational_expression_: . RELOP shift_expression relational_expression_
  116                       | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, TWO_POINTS, CLOSE_PAREN]
  119 shift_expression_: . SHIFTS additive_expression shift_expression_
  120                  | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, TWO_POINTS, CLOSE_PAREN]
  123 additive_expression_: . PLUS multiplicative_expression additive_expression_
  124                     | . MINUS multiplicative_expression additive_expression_
  125                     | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, TWO_POINTS, CLOSE_PAREN]
  128 multiplicative_expression_: . MULT unary_expression multiplicative_expression_
  129                           | . DIV unary_expression multiplicative_expression_
  130                           | . MOD unary_expression multiplicative_expression_
  131                           | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, TWO_POINTS, CLOSE_PAREN]

    QUESTION_MARK  shift, and go to state 340
    OR_LOGIC       shift, and go to state 200
    AND_LOGIC      shift, and go to state 203
    OR             shift, and go to state 207
    OR_EXC         shift, and go to state 210
    AND            shift, and go to state 213
    PLUS           shift, and go to state 225
    MINUS          shift, and go to state 226
    MULT           shift, and go to state 229
    DIV            shift, and go to state 230
    MOD            shift, and go to state 231
    EQUALOP        shift, and go to state 216
    RELOP          shift, and go to state 219
    SHIFTS         shift, and go to state 222

    END          reduce using rule 88 (conditional_opt)
    END          [reduce using rule 92 (conditional_or_expression_)]
    END          [reduce using rule 96 (conditional_and_expression_)]
    END          [reduce using rule 100 (inclusive_or_expression_)]
    END          [reduce using rule 104 (exclusive_or_expression_)]
    END          [reduce using rule 108 (and_expression_)]
    END          [reduce using rule 112 (equality_expression_)]
    END          [reduce using rule 116 (relational_expression_)]
    END          [reduce using rule 120 (shift_expression_)]
    END          [reduce using rule 125 (additive_expression_)]
    END          [reduce using rule 131 (multiplicative_expression_)]
    PT_VIRGULA   reduce using rule 88 (conditional_opt)
    PT_VIRGULA   [reduce using rule 92 (conditional_or_expression_)]
    PT_VIRGULA   [reduce using rule 96 (conditional_and_expression_)]
    PT_VIRGULA   [reduce using rule 100 (inclusive_or_expression_)]
    PT_VIRGULA   [reduce using rule 104 (exclusive_or_expression_)]
    PT_VIRGULA   [reduce using rule 108 (and_expression_)]
    PT_VIRGULA   [reduce using rule 112 (equality_expression_)]
    PT_VIRGULA   [reduce using rule 116 (relational_expression_)]
    PT_VIRGULA   [reduce using rule 120 (shift_expression_)]
    PT_VIRGULA   [reduce using rule 125 (additive_expression_)]
    PT_VIRGULA   [reduce using rule 131 (multiplicative_expression_)]
    CLOSE_COLC   reduce using rule 88 (conditional_opt)
    CLOSE_COLC   [reduce using rule 92 (conditional_or_expression_)]
    CLOSE_COLC   [reduce using rule 96 (conditional_and_expression_)]
    CLOSE_COLC   [reduce using rule 100 (inclusive_or_expression_)]
    CLOSE_COLC   [reduce using rule 104 (exclusive_or_expression_)]
    CLOSE_COLC   [reduce using rule 108 (and_expression_)]
    CLOSE_COLC   [reduce using rule 112 (equality_expression_)]
    CLOSE_COLC   [reduce using rule 116 (relational_expression_)]
    CLOSE_COLC   [reduce using rule 120 (shift_expression_)]
    CLOSE_COLC   [reduce using rule 125 (additive_expression_)]
    CLOSE_COLC   [reduce using rule 131 (multiplicative_expression_)]
    VIRGULA      reduce using rule 88 (conditional_opt)
    VIRGULA      [reduce using rule 92 (conditional_or_expression_)]
    VIRGULA      [reduce using rule 96 (conditional_and_expression_)]
    VIRGULA      [reduce using rule 100 (inclusive_or_expression_)]
    VIRGULA      [reduce using rule 104 (exclusive_or_expression_)]
    VIRGULA      [reduce using rule 108 (and_expression_)]
    VIRGULA      [reduce using rule 112 (equality_expression_)]
    VIRGULA      [reduce using rule 116 (relational_expression_)]
    VIRGULA      [reduce using rule 120 (shift_expression_)]
    VIRGULA      [reduce using rule 125 (additive_expression_)]
    VIRGULA      [reduce using rule 131 (multiplicative_expression_)]
    TWO_POINTS   reduce using rule 88 (conditional_opt)
    TWO_POINTS   [reduce using rule 92 (conditional_or_expression_)]
    TWO_POINTS   [reduce using rule 96 (conditional_and_expression_)]
    TWO_POINTS   [reduce using rule 100 (inclusive_or_expression_)]
    TWO_POINTS   [reduce using rule 104 (exclusive_or_expression_)]
    TWO_POINTS   [reduce using rule 108 (and_expression_)]
    TWO_POINTS   [reduce using rule 112 (equality_expression_)]
    TWO_POINTS   [reduce using rule 116 (relational_expression_)]
    TWO_POINTS   [reduce using rule 120 (shift_expression_)]
    TWO_POINTS   [reduce using rule 125 (additive_expression_)]
    TWO_POINTS   [reduce using rule 131 (multiplicative_expression_)]
    CLOSE_PAREN  reduce using rule 88 (conditional_opt)
    CLOSE_PAREN  [reduce using rule 92 (conditional_or_expression_)]
    CLOSE_PAREN  [reduce using rule 96 (conditional_and_expression_)]
    CLOSE_PAREN  [reduce using rule 100 (inclusive_or_expression_)]
    CLOSE_PAREN  [reduce using rule 104 (exclusive_or_expression_)]
    CLOSE_PAREN  [reduce using rule 108 (and_expression_)]
    CLOSE_PAREN  [reduce using rule 112 (equality_expression_)]
    CLOSE_PAREN  [reduce using rule 116 (relational_expression_)]
    CLOSE_PAREN  [reduce using rule 120 (shift_expression_)]
    CLOSE_PAREN  [reduce using rule 125 (additive_expression_)]
    CLOSE_PAREN  [reduce using rule 131 (multiplicative_expression_)]
    $default     reduce using rule 88 (conditional_opt)

    conditional_opt              go to state 341
    conditional_or_expression_   go to state 342
    conditional_and_expression_  go to state 343
    inclusive_or_expression_     go to state 344
    exclusive_or_expression_     go to state 345
    and_expression_              go to state 346
    equality_expression_         go to state 347
    relational_expression_       go to state 348
    shift_expression_            go to state 349
    additive_expression_         go to state 350
    multiplicative_expression_   go to state 351


state 278

   76 conditional_expression: conditional_or_expression QUESTION_MARK conditional_expression . TWO_POINTS conditional_expression

    TWO_POINTS  shift, and go to state 352


state 279

   91 conditional_or_expression_: . OR_LOGIC conditional_and_expression conditional_or_expression_
   91                           | OR_LOGIC conditional_and_expression . conditional_or_expression_
   92                           | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, CLOSE_PAREN]

    OR_LOGIC  shift, and go to state 200

    $default  reduce using rule 92 (conditional_or_expression_)

    conditional_or_expression_  go to state 353


state 280

   90 conditional_or_expression: conditional_and_expression OPEN_PAREN conditional_expression . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 354


state 281

   95 conditional_and_expression_: . AND_LOGIC inclusive_or_expression conditional_and_expression_
   95                            | AND_LOGIC inclusive_or_expression . conditional_and_expression_
   96                            | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, OPEN_PAREN, CLOSE_PAREN]

    AND_LOGIC  shift, and go to state 203

    $default  reduce using rule 96 (conditional_and_expression_)

    conditional_and_expression_  go to state 355


state 282

   94 conditional_and_expression: inclusive_or_expression OPEN_PAREN conditional_expression . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 356


state 283

   98 inclusive_or_expression: exclusive_or_expression OPEN_PAREN conditional_expression . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 357


state 284

   99 inclusive_or_expression_: . OR exclusive_or_expression inclusive_or_expression_
   99                         | OR exclusive_or_expression . inclusive_or_expression_
  100                         | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN]

    OR  shift, and go to state 207

    $default  reduce using rule 100 (inclusive_or_expression_)

    inclusive_or_expression_  go to state 358


state 285

  102 exclusive_or_expression: and_expression OPEN_PAREN conditional_expression . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 359


state 286

  103 exclusive_or_expression_: . OR_EXC and_expression exclusive_or_expression_
  103                         | OR_EXC and_expression . exclusive_or_expression_
  104                         | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN, OR]

    OR_EXC  shift, and go to state 210

    $default  reduce using rule 104 (exclusive_or_expression_)

    exclusive_or_expression_  go to state 360


state 287

  106 and_expression: equality_expression OPEN_PAREN conditional_expression . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 361


state 288

  107 and_expression_: . AND equality_expression and_expression_
  107                | AND equality_expression . and_expression_
  108                | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN, OR, OR_EXC]

    AND  shift, and go to state 213

    $default  reduce using rule 108 (and_expression_)

    and_expression_  go to state 362


state 289

  110 equality_expression: relational_expression OPEN_PAREN conditional_expression . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 363


state 290

  111 equality_expression_: . EQUALOP relational_expression equality_expression_
  111                     | EQUALOP relational_expression . equality_expression_
  112                     | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN, OR, OR_EXC, AND]

    EQUALOP  shift, and go to state 216

    $default  reduce using rule 112 (equality_expression_)

    equality_expression_  go to state 364


state 291

  114 relational_expression: shift_expression OPEN_PAREN conditional_expression . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 365


state 292

  115 relational_expression_: . RELOP shift_expression relational_expression_
  115                       | RELOP shift_expression . relational_expression_
  116                       | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN, OR, OR_EXC, AND, EQUALOP]

    RELOP  shift, and go to state 219

    $default  reduce using rule 116 (relational_expression_)

    relational_expression_  go to state 366


state 293

  118 shift_expression: additive_expression OPEN_PAREN conditional_expression . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 367


state 294

  119 shift_expression_: . SHIFTS additive_expression shift_expression_
  119                  | SHIFTS additive_expression . shift_expression_
  120                  | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN, OR, OR_EXC, AND, EQUALOP, RELOP]

    SHIFTS  shift, and go to state 222

    $default  reduce using rule 120 (shift_expression_)

    shift_expression_  go to state 368


state 295

  122 additive_expression: multiplicative_expression OPEN_PAREN conditional_expression . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 369


state 296

  123 additive_expression_: . PLUS multiplicative_expression additive_expression_
  123                     | PLUS multiplicative_expression . additive_expression_
  124                     | . MINUS multiplicative_expression additive_expression_
  125                     | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN, OR, OR_EXC, AND, EQUALOP, RELOP, SHIFTS]

    PLUS   shift, and go to state 225
    MINUS  shift, and go to state 226

    $default  reduce using rule 125 (additive_expression_)

    additive_expression_  go to state 370


state 297

  123 additive_expression_: . PLUS multiplicative_expression additive_expression_
  124                     | . MINUS multiplicative_expression additive_expression_
  124                     | MINUS multiplicative_expression . additive_expression_
  125                     | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN, OR, OR_EXC, AND, EQUALOP, RELOP, SHIFTS]

    PLUS   shift, and go to state 225
    MINUS  shift, and go to state 226

    $default  reduce using rule 125 (additive_expression_)

    additive_expression_  go to state 371


state 298

  127 multiplicative_expression: unary_expression OPEN_PAREN conditional_expression . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 372


state 299

  128 multiplicative_expression_: . MULT unary_expression multiplicative_expression_
  128                           | MULT unary_expression . multiplicative_expression_
  129                           | . DIV unary_expression multiplicative_expression_
  130                           | . MOD unary_expression multiplicative_expression_
  131                           | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN, OR, OR_EXC, AND, PLUS, MINUS, EQUALOP, RELOP, SHIFTS]

    MULT  shift, and go to state 229
    DIV   shift, and go to state 230
    MOD   shift, and go to state 231

    $default  reduce using rule 131 (multiplicative_expression_)

    multiplicative_expression_  go to state 373


state 300

  128 multiplicative_expression_: . MULT unary_expression multiplicative_expression_
  129                           | . DIV unary_expression multiplicative_expression_
  129                           | DIV unary_expression . multiplicative_expression_
  130                           | . MOD unary_expression multiplicative_expression_
  131                           | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN, OR, OR_EXC, AND, PLUS, MINUS, EQUALOP, RELOP, SHIFTS]

    MULT  shift, and go to state 229
    DIV   shift, and go to state 230
    MOD   shift, and go to state 231

    $default  reduce using rule 131 (multiplicative_expression_)

    multiplicative_expression_  go to state 374


state 301

  128 multiplicative_expression_: . MULT unary_expression multiplicative_expression_
  129                           | . DIV unary_expression multiplicative_expression_
  130                           | . MOD unary_expression multiplicative_expression_
  130                           | MOD unary_expression . multiplicative_expression_
  131                           | .  [END, PT_VIRGULA, CLOSE_COLC, VIRGULA, QUESTION_MARK, TWO_POINTS, OR_LOGIC, AND_LOGIC, OPEN_PAREN, CLOSE_PAREN, OR, OR_EXC, AND, PLUS, MINUS, EQUALOP, RELOP, SHIFTS]

    MULT  shift, and go to state 229
    DIV   shift, and go to state 230
    MOD   shift, and go to state 231

    $default  reduce using rule 131 (multiplicative_expression_)

    multiplicative_expression_  go to state 375


state 302

    3 identifier: . ID
   49 expression: . assignment_expression
   50 assignment_expression: . conditional_expression
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   64 argument_list: . expression argument_list_
   65              | . argument_list_
   66 argument_list_: . VIRGULA expression argument_list_
   67               | .  [CLOSE_PAREN]
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  177                  | LITERAL POINT identifier OPEN_PAREN . argument_list CLOSE_PAREN

    VIRGULA     shift, and go to state 237
    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    $default  reduce using rule 67 (argument_list_)

    identifier                  go to state 110
    expression                  go to state 238
    assignment_expression       go to state 127
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    argument_list               go to state 376
    argument_list_              go to state 240
    conditional_expression      go to state 128
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 303

   66 argument_list_: . VIRGULA expression argument_list_
   66               | VIRGULA expression . argument_list_
   67               | .  [CLOSE_PAREN]

    VIRGULA  shift, and go to state 237

    $default  reduce using rule 67 (argument_list_)

    argument_list_  go to state 377


state 304

   64 argument_list: expression argument_list_ .

    $default  reduce using rule 64 (argument_list)


state 305

  175 method_invocation: identifier OPEN_PAREN argument_list CLOSE_PAREN .

    $default  reduce using rule 175 (method_invocation)


state 306

   15 local_variable_declaration_: local_variable_declaration PT_VIRGULA .

    $default  reduce using rule 15 (local_variable_declaration_)


state 307

   18 local_variable_declaration: primitive_type OPEN_COLC CLOSE_COLC variable_declarators .

    $default  reduce using rule 18 (local_variable_declaration)


state 308

  176 method_invocation: field_access OPEN_PAREN argument_list CLOSE_PAREN .

    $default  reduce using rule 176 (method_invocation)


state 309

   58 array_access: primary_no_new_array OPEN_COLC expression CLOSE_COLC .

    $default  reduce using rule 58 (array_access)


state 310

  237 formal_parameter_list_: VIRGULA formal_parameter formal_parameter_list_ .

    $default  reduce using rule 237 (formal_parameter_list_)


state 311

  242 field_declaration: field_modifiers_ primitive_type OPEN_COLC CLOSE_COLC variable_declarators PT_VIRGULA .

    $default  reduce using rule 242 (field_declaration)


state 312

   33 variable_declarators_: VIRGULA variable_declarator variable_declarators_ .

    $default  reduce using rule 33 (variable_declarators_)


state 313

    3 identifier: . ID
   38 variable_initializer: . assignment_expression
   39                     | . array_initializer
   40                     | . left_hand_side
   41 array_initializer: . BEG variable_initializers virgula_opt END
   42                  | . array_creation_expression
   47 variable_initializers_: VIRGULA . variable_initializer variable_initializers_
   50 assignment_expression: . conditional_expression
   51 field_access: . identifier POINT identifier
   52 left_hand_side: . field_access
   53               | . array_access
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   68 array_creation_expression: . NEW primitive_type dim_exprs dims
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    BEG         shift, and go to state 257
    OPEN_PAREN  shift, and go to state 125
    NEW         shift, and go to state 258
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    variable_initializer        go to state 378
    array_initializer           go to state 260
    assignment_expression       go to state 261
    field_access                go to state 262
    left_hand_side              go to state 263
    array_access                go to state 264
    primary_no_new_array        go to state 111
    array_creation_expression   go to state 265
    conditional_expression      go to state 128
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 314

   45 variable_initializers: variable_initializer . variable_initializers_
   47 variable_initializers_: . VIRGULA variable_initializer variable_initializers_
   48                       | .  [END, VIRGULA]

    VIRGULA  shift, and go to state 313

    VIRGULA   [reduce using rule 48 (variable_initializers_)]
    $default  reduce using rule 48 (variable_initializers_)

    variable_initializers_  go to state 379


state 315

   41 array_initializer: BEG variable_initializers . virgula_opt END
   43 virgula_opt: . VIRGULA
   44            | .  [END]

    VIRGULA  shift, and go to state 380

    $default  reduce using rule 44 (virgula_opt)

    virgula_opt  go to state 381


state 316

   46 variable_initializers: variable_initializers_ .

    $default  reduce using rule 46 (variable_initializers)


state 317

   68 array_creation_expression: NEW primitive_type . dim_exprs dims
   69 dim_exprs: . OPEN_COLC dim_expr_or_empty CLOSE_COLC

    OPEN_COLC  shift, and go to state 382

    dim_exprs  go to state 383


state 318

    6 static_initializer: PUBLIC STATIC VOID MAIN OPEN_PAREN TYPE_STRING . OPEN_COLC CLOSE_COLC ARGS CLOSE_PAREN block

    OPEN_COLC  shift, and go to state 384


state 319

  141 cast_expression: OPEN_PAREN primitive_type CLOSE_PAREN unary_expression .

    $default  reduce using rule 141 (cast_expression)


state 320

    3 identifier: . ID
   19 primitive_type: . numeric_type
   20               | . TYPE_BOOL
   21               | . TYPE_STRING
   22 numeric_type: . integral_type
   23             | . floating_point_type
   24 integral_type: . TYPE_BYTE
   25              | . TYPE_SHORT
   26              | . TYPE_INT
   27              | . TYPE_LONG
   28              | . TYPE_CHAR
   29 floating_point_type: . TYPE_FLOAT
   30                    | . TYPE_DOUBLE
  141 cast_expression: OPEN_PAREN . primitive_type CLOSE_PAREN unary_expression
  142                | OPEN_PAREN . reference_type CLOSE_PAREN unary_expression_not_plus_minus
  143 reference_type: . class_type
  144               | . array_type
  145 class_type: . identifier
  146 array_type: . primitive_type OPEN_COLC CLOSE_COLC

    TYPE_INT     shift, and go to state 14
    TYPE_SHORT   shift, and go to state 15
    TYPE_LONG    shift, and go to state 16
    TYPE_BYTE    shift, and go to state 17
    TYPE_BOOL    shift, and go to state 18
    TYPE_FLOAT   shift, and go to state 19
    TYPE_DOUBLE  shift, and go to state 20
    TYPE_CHAR    shift, and go to state 21
    TYPE_STRING  shift, and go to state 22
    ID           shift, and go to state 4

    identifier           go to state 385
    primitive_type       go to state 176
    numeric_type         go to state 27
    integral_type        go to state 28
    floating_point_type  go to state 29
    reference_type       go to state 178
    class_type           go to state 179
    array_type           go to state 180


state 321

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  149 unary_expression_not_plus_minus: NOT . unary_expression
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 103
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier            go to state 110
    field_access          go to state 77
    array_access          go to state 78
    primary_no_new_array  go to state 111
    unary_expression      go to state 386
    cast_expression       go to state 113
    postfix_expression    go to state 114
    method_invocation     go to state 86


state 322

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  148 unary_expression_not_plus_minus: NOT_BIT . unary_expression
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 103
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier            go to state 110
    field_access          go to state 77
    array_access          go to state 78
    primary_no_new_array  go to state 111
    unary_expression      go to state 387
    cast_expression       go to state 113
    postfix_expression    go to state 114
    method_invocation     go to state 86


state 323

  150 unary_expression_not_plus_minus: cast_expression .

    $default  reduce using rule 150 (unary_expression_not_plus_minus)


state 324

  142 cast_expression: OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus .

    $default  reduce using rule 142 (cast_expression)


state 325

  147 unary_expression_not_plus_minus: postfix_expression .

    $default  reduce using rule 147 (unary_expression_not_plus_minus)


state 326

  159 statement: FOR OPEN_PAREN for_init PT_VIRGULA expression_opt . PT_VIRGULA for_update_opt CLOSE_PAREN statement

    PT_VIRGULA  shift, and go to state 388


state 327

  166 statement_expression_list_: . VIRGULA statement_expression statement_expression_list_
  166                           | VIRGULA statement_expression . statement_expression_list_
  167                           | .  [PT_VIRGULA, CLOSE_PAREN]

    VIRGULA  shift, and go to state 271

    $default  reduce using rule 167 (statement_expression_list_)

    statement_expression_list_  go to state 389


state 328

  159 statement: FOR . OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement
  218 statement_no_short_if: FOR . OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement_no_short_if

    OPEN_PAREN  shift, and go to state 390


state 329

  157 statement: IF . OPEN_PAREN expression CLOSE_PAREN optional_else
  216 statement_no_short_if: IF . OPEN_PAREN expression CLOSE_PAREN statement_no_short_if ELSE statement_no_short_if

    OPEN_PAREN  shift, and go to state 391


state 330

  158 statement: WHILE . OPEN_PAREN expression CLOSE_PAREN statement
  217 statement_no_short_if: WHILE . OPEN_PAREN expression CLOSE_PAREN statement_no_short_if

    OPEN_PAREN  shift, and go to state 392


state 331

   51 field_access: identifier . POINT identifier
   63 primary_no_new_array: identifier .  [PT_VIRGULA, OPEN_COLC, EQUAL, INCREMENT, DECREMENT, SHIFT_ASSIGN, ARITH_ASSIGN, LOGIC_ASSIGN]
  156 statement: identifier . TWO_POINTS statement
  175 method_invocation: identifier . OPEN_PAREN argument_list CLOSE_PAREN
  215 statement_no_short_if: identifier . TWO_POINTS statement_no_short_if

    POINT       shift, and go to state 142
    TWO_POINTS  shift, and go to state 393
    OPEN_PAREN  shift, and go to state 144

    $default  reduce using rule 63 (primary_no_new_array)


state 332

  160 optional_else: statement .

    $default  reduce using rule 160 (optional_else)


state 333

  157 statement: IF OPEN_PAREN expression CLOSE_PAREN optional_else .

    $default  reduce using rule 157 (statement)


state 334

  155 statement: statement_without_trailing_substatement .  [BEG, END, PT_VIRGULA, INCREMENT, DECREMENT, FOR, IF, WHILE, CASE, SWITCH, DEFAULT, DO, BREAK, CONTINUE, GOTO, RETURN, TYPE_INT, TYPE_SHORT, TYPE_LONG, TYPE_BYTE, TYPE_BOOL, TYPE_FLOAT, TYPE_DOUBLE, TYPE_CHAR, TYPE_STRING, ID, LITERAL]
  214 statement_no_short_if: statement_without_trailing_substatement .  [ELSE]

    ELSE      reduce using rule 214 (statement_no_short_if)
    $default  reduce using rule 155 (statement)


state 335

  161 optional_else: statement_no_short_if . ELSE statement

    ELSE  shift, and go to state 394


state 336

  158 statement: WHILE OPEN_PAREN expression CLOSE_PAREN statement .

    $default  reduce using rule 158 (statement)


state 337

  195 switch_block: BEG . switch_block_statement_groups switch_labels END
  196 switch_block_statement_groups: . switch_block_statement_group switch_block_statement_groups_
  197                              | . switch_block_statement_groups_
  198 switch_block_statement_groups_: . switch_block_statement_group switch_block_statement_groups_
  199                               | .  [END, CASE, DEFAULT]
  200 switch_block_statement_group: . switch_labels block_statements
  201 switch_labels: . switch_label switch_labels_
  202              | . switch_labels_
  203 switch_labels_: . switch_label switch_labels_
  204               | .  [BEG, END, PT_VIRGULA, INCREMENT, DECREMENT, FOR, IF, WHILE, CASE, SWITCH, DEFAULT, DO, BREAK, CONTINUE, GOTO, RETURN, TYPE_INT, TYPE_SHORT, TYPE_LONG, TYPE_BYTE, TYPE_BOOL, TYPE_FLOAT, TYPE_DOUBLE, TYPE_CHAR, TYPE_STRING, ID, LITERAL]
  205 switch_label: . CASE expression TWO_POINTS
  206             | . DEFAULT TWO_POINTS

    CASE     shift, and go to state 395
    DEFAULT  shift, and go to state 396

    END       reduce using rule 199 (switch_block_statement_groups_)
    END       [reduce using rule 204 (switch_labels_)]
    CASE      [reduce using rule 199 (switch_block_statement_groups_)]
    CASE      [reduce using rule 204 (switch_labels_)]
    DEFAULT   [reduce using rule 199 (switch_block_statement_groups_)]
    DEFAULT   [reduce using rule 204 (switch_labels_)]
    $default  reduce using rule 204 (switch_labels_)

    switch_block_statement_groups   go to state 397
    switch_block_statement_groups_  go to state 398
    switch_block_statement_group    go to state 399
    switch_labels                   go to state 400
    switch_labels_                  go to state 401
    switch_label                    go to state 402


state 338

  194 switch_statement: SWITCH OPEN_PAREN expression CLOSE_PAREN switch_block .

    $default  reduce using rule 194 (switch_statement)


state 339

  207 do_statement: DO statement WHILE OPEN_PAREN expression . CLOSE_PAREN PT_VIRGULA

    CLOSE_PAREN  shift, and go to state 403


state 340

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK . conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 404
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 341

   75 conditional_expression: OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt .

    $default  reduce using rule 75 (conditional_expression)


state 342

   78 conditional_opt: conditional_or_expression_ .

    $default  reduce using rule 78 (conditional_opt)


state 343

   79 conditional_opt: conditional_and_expression_ .

    $default  reduce using rule 79 (conditional_opt)


state 344

   80 conditional_opt: inclusive_or_expression_ .

    $default  reduce using rule 80 (conditional_opt)


state 345

   81 conditional_opt: exclusive_or_expression_ .

    $default  reduce using rule 81 (conditional_opt)


state 346

   82 conditional_opt: and_expression_ .

    $default  reduce using rule 82 (conditional_opt)


state 347

   83 conditional_opt: equality_expression_ .

    $default  reduce using rule 83 (conditional_opt)


state 348

   84 conditional_opt: relational_expression_ .

    $default  reduce using rule 84 (conditional_opt)


state 349

   85 conditional_opt: shift_expression_ .

    $default  reduce using rule 85 (conditional_opt)


state 350

   86 conditional_opt: additive_expression_ .

    $default  reduce using rule 86 (conditional_opt)


state 351

   87 conditional_opt: multiplicative_expression_ .

    $default  reduce using rule 87 (conditional_opt)


state 352

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   76                       | conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS . conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 405
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 353

   91 conditional_or_expression_: OR_LOGIC conditional_and_expression conditional_or_expression_ .

    $default  reduce using rule 91 (conditional_or_expression_)


state 354

   90 conditional_or_expression: conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN .

    $default  reduce using rule 90 (conditional_or_expression)


state 355

   95 conditional_and_expression_: AND_LOGIC inclusive_or_expression conditional_and_expression_ .

    $default  reduce using rule 95 (conditional_and_expression_)


state 356

   94 conditional_and_expression: inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN .

    $default  reduce using rule 94 (conditional_and_expression)


state 357

   98 inclusive_or_expression: exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN .

    $default  reduce using rule 98 (inclusive_or_expression)


state 358

   99 inclusive_or_expression_: OR exclusive_or_expression inclusive_or_expression_ .

    $default  reduce using rule 99 (inclusive_or_expression_)


state 359

  102 exclusive_or_expression: and_expression OPEN_PAREN conditional_expression CLOSE_PAREN .

    $default  reduce using rule 102 (exclusive_or_expression)


state 360

  103 exclusive_or_expression_: OR_EXC and_expression exclusive_or_expression_ .

    $default  reduce using rule 103 (exclusive_or_expression_)


state 361

  106 and_expression: equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN .

    $default  reduce using rule 106 (and_expression)


state 362

  107 and_expression_: AND equality_expression and_expression_ .

    $default  reduce using rule 107 (and_expression_)


state 363

  110 equality_expression: relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN .

    $default  reduce using rule 110 (equality_expression)


state 364

  111 equality_expression_: EQUALOP relational_expression equality_expression_ .

    $default  reduce using rule 111 (equality_expression_)


state 365

  114 relational_expression: shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN .

    $default  reduce using rule 114 (relational_expression)


state 366

  115 relational_expression_: RELOP shift_expression relational_expression_ .

    $default  reduce using rule 115 (relational_expression_)


state 367

  118 shift_expression: additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN .

    $default  reduce using rule 118 (shift_expression)


state 368

  119 shift_expression_: SHIFTS additive_expression shift_expression_ .

    $default  reduce using rule 119 (shift_expression_)


state 369

  122 additive_expression: multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN .

    $default  reduce using rule 122 (additive_expression)


state 370

  123 additive_expression_: PLUS multiplicative_expression additive_expression_ .

    $default  reduce using rule 123 (additive_expression_)


state 371

  124 additive_expression_: MINUS multiplicative_expression additive_expression_ .

    $default  reduce using rule 124 (additive_expression_)


state 372

  127 multiplicative_expression: unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN .

    $default  reduce using rule 127 (multiplicative_expression)


state 373

  128 multiplicative_expression_: MULT unary_expression multiplicative_expression_ .

    $default  reduce using rule 128 (multiplicative_expression_)


state 374

  129 multiplicative_expression_: DIV unary_expression multiplicative_expression_ .

    $default  reduce using rule 129 (multiplicative_expression_)


state 375

  130 multiplicative_expression_: MOD unary_expression multiplicative_expression_ .

    $default  reduce using rule 130 (multiplicative_expression_)


state 376

  177 method_invocation: LITERAL POINT identifier OPEN_PAREN argument_list . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 406


state 377

   66 argument_list_: VIRGULA expression argument_list_ .

    $default  reduce using rule 66 (argument_list_)


state 378

   47 variable_initializers_: . VIRGULA variable_initializer variable_initializers_
   47                       | VIRGULA variable_initializer . variable_initializers_
   48                       | .  [END, VIRGULA]

    VIRGULA  shift, and go to state 313

    VIRGULA   [reduce using rule 48 (variable_initializers_)]
    $default  reduce using rule 48 (variable_initializers_)

    variable_initializers_  go to state 407


state 379

   45 variable_initializers: variable_initializer variable_initializers_ .

    $default  reduce using rule 45 (variable_initializers)


state 380

   43 virgula_opt: VIRGULA .

    $default  reduce using rule 43 (virgula_opt)


state 381

   41 array_initializer: BEG variable_initializers virgula_opt . END

    END  shift, and go to state 408


state 382

    3 identifier: . ID
   49 expression: . assignment_expression
   50 assignment_expression: . conditional_expression
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   69 dim_exprs: OPEN_COLC . dim_expr_or_empty CLOSE_COLC
   70 dim_expr_or_empty: . expression
   71                  | .  [CLOSE_COLC]
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    $default  reduce using rule 71 (dim_expr_or_empty)

    identifier                  go to state 110
    expression                  go to state 409
    assignment_expression       go to state 127
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    dim_expr_or_empty           go to state 410
    conditional_expression      go to state 128
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 383

   68 array_creation_expression: NEW primitive_type dim_exprs . dims
   69 dim_exprs: . OPEN_COLC dim_expr_or_empty CLOSE_COLC
   72 dims: . dim_exprs
   73     | .  [END, PT_VIRGULA, VIRGULA]

    OPEN_COLC  shift, and go to state 382

    $default  reduce using rule 73 (dims)

    dim_exprs  go to state 411
    dims       go to state 412


state 384

    6 static_initializer: PUBLIC STATIC VOID MAIN OPEN_PAREN TYPE_STRING OPEN_COLC . CLOSE_COLC ARGS CLOSE_PAREN block

    CLOSE_COLC  shift, and go to state 413


state 385

  145 class_type: identifier .

    $default  reduce using rule 145 (class_type)


state 386

  149 unary_expression_not_plus_minus: NOT unary_expression .

    $default  reduce using rule 149 (unary_expression_not_plus_minus)


state 387

  148 unary_expression_not_plus_minus: NOT_BIT unary_expression .

    $default  reduce using rule 148 (unary_expression_not_plus_minus)


state 388

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  151 postfix_expression: . primary_no_new_array postfix_expression_
  159 statement: FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA . for_update_opt CLOSE_PAREN statement
  165 statement_expression_list: . statement_expression statement_expression_list_
  168 statement_expression: . primary_no_new_array assignment_operator assignment_expression
  169                     | . preincrement_expression
  170                     | . post_incr_decrement_expression
  171                     | . predecrement_expression
  172 preincrement_expression: . INCREMENT unary_expression
  173 post_incr_decrement_expression: . postfix_expression
  174 predecrement_expression: . DECREMENT unary_expression
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  180 for_update: . statement_expression_list
  181 for_update_opt: . for_update
  182               | .  [CLOSE_PAREN]

    INCREMENT  shift, and go to state 57
    DECREMENT  shift, and go to state 58
    ID         shift, and go to state 4
    LITERAL    shift, and go to state 68

    $default  reduce using rule 182 (for_update_opt)

    identifier                      go to state 110
    field_access                    go to state 77
    array_access                    go to state 78
    primary_no_new_array            go to state 79
    postfix_expression              go to state 80
    statement_expression_list       go to state 414
    statement_expression            go to state 190
    preincrement_expression         go to state 83
    post_incr_decrement_expression  go to state 84
    predecrement_expression         go to state 85
    method_invocation               go to state 86
    for_update                      go to state 415
    for_update_opt                  go to state 416


state 389

  166 statement_expression_list_: VIRGULA statement_expression statement_expression_list_ .

    $default  reduce using rule 166 (statement_expression_list_)


state 390

    3 identifier: . ID
   17 local_variable_declaration: . primitive_type variable_declarators
   18                           | . primitive_type OPEN_COLC CLOSE_COLC variable_declarators
   19 primitive_type: . numeric_type
   20               | . TYPE_BOOL
   21               | . TYPE_STRING
   22 numeric_type: . integral_type
   23             | . floating_point_type
   24 integral_type: . TYPE_BYTE
   25              | . TYPE_SHORT
   26              | . TYPE_INT
   27              | . TYPE_LONG
   28              | . TYPE_CHAR
   29 floating_point_type: . TYPE_FLOAT
   30                    | . TYPE_DOUBLE
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  151 postfix_expression: . primary_no_new_array postfix_expression_
  159 statement: FOR OPEN_PAREN . for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement
  162 for_init: . statement_expression_list
  163         | . local_variable_declaration
  164         | .  [PT_VIRGULA]
  165 statement_expression_list: . statement_expression statement_expression_list_
  168 statement_expression: . primary_no_new_array assignment_operator assignment_expression
  169                     | . preincrement_expression
  170                     | . post_incr_decrement_expression
  171                     | . predecrement_expression
  172 preincrement_expression: . INCREMENT unary_expression
  173 post_incr_decrement_expression: . postfix_expression
  174 predecrement_expression: . DECREMENT unary_expression
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  218 statement_no_short_if: FOR OPEN_PAREN . for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement_no_short_if

    INCREMENT    shift, and go to state 57
    DECREMENT    shift, and go to state 58
    TYPE_INT     shift, and go to state 14
    TYPE_SHORT   shift, and go to state 15
    TYPE_LONG    shift, and go to state 16
    TYPE_BYTE    shift, and go to state 17
    TYPE_BOOL    shift, and go to state 18
    TYPE_FLOAT   shift, and go to state 19
    TYPE_DOUBLE  shift, and go to state 20
    TYPE_CHAR    shift, and go to state 21
    TYPE_STRING  shift, and go to state 22
    ID           shift, and go to state 4
    LITERAL      shift, and go to state 68

    $default  reduce using rule 164 (for_init)

    identifier                      go to state 110
    local_variable_declaration      go to state 187
    primitive_type                  go to state 76
    numeric_type                    go to state 27
    integral_type                   go to state 28
    floating_point_type             go to state 29
    field_access                    go to state 77
    array_access                    go to state 78
    primary_no_new_array            go to state 79
    postfix_expression              go to state 80
    for_init                        go to state 417
    statement_expression_list       go to state 189
    statement_expression            go to state 190
    preincrement_expression         go to state 83
    post_incr_decrement_expression  go to state 84
    predecrement_expression         go to state 85
    method_invocation               go to state 86


state 391

    3 identifier: . ID
   49 expression: . assignment_expression
   50 assignment_expression: . conditional_expression
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  157 statement: IF OPEN_PAREN . expression CLOSE_PAREN optional_else
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  216 statement_no_short_if: IF OPEN_PAREN . expression CLOSE_PAREN statement_no_short_if ELSE statement_no_short_if

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    expression                  go to state 418
    assignment_expression       go to state 127
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 128
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 392

    3 identifier: . ID
   49 expression: . assignment_expression
   50 assignment_expression: . conditional_expression
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  158 statement: WHILE OPEN_PAREN . expression CLOSE_PAREN statement
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  217 statement_no_short_if: WHILE OPEN_PAREN . expression CLOSE_PAREN statement_no_short_if

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    expression                  go to state 419
    assignment_expression       go to state 127
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 128
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 393

    3 identifier: . ID
    7 block: . BEG block_statements END
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  151 postfix_expression: . primary_no_new_array postfix_expression_
  155 statement: . statement_without_trailing_substatement
  156          | . identifier TWO_POINTS statement
  156          | identifier TWO_POINTS . statement
  157          | . IF OPEN_PAREN expression CLOSE_PAREN optional_else
  158          | . WHILE OPEN_PAREN expression CLOSE_PAREN statement
  159          | . FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement
  168 statement_expression: . primary_no_new_array assignment_operator assignment_expression
  169                     | . preincrement_expression
  170                     | . post_incr_decrement_expression
  171                     | . predecrement_expression
  172 preincrement_expression: . INCREMENT unary_expression
  173 post_incr_decrement_expression: . postfix_expression
  174 predecrement_expression: . DECREMENT unary_expression
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  183 statement_without_trailing_substatement: . block
  184                                        | . empty_statement
  185                                        | . expression_statement
  186                                        | . switch_statement
  187                                        | . do_statement
  188                                        | . break_statement
  189                                        | . continue_statement
  190                                        | . goto_statement
  191                                        | . return_statement
  192 empty_statement: . PT_VIRGULA
  193 expression_statement: . statement_expression PT_VIRGULA
  194 switch_statement: . SWITCH OPEN_PAREN expression CLOSE_PAREN switch_block
  207 do_statement: . DO statement WHILE OPEN_PAREN expression CLOSE_PAREN PT_VIRGULA
  208 break_statement: . BREAK identifier_opt PT_VIRGULA
  209 continue_statement: . CONTINUE identifier_opt PT_VIRGULA
  210 goto_statement: . GOTO identifier_opt PT_VIRGULA
  211 return_statement: . RETURN expression_opt PT_VIRGULA
  214 statement_no_short_if: . statement_without_trailing_substatement
  215                      | . identifier TWO_POINTS statement_no_short_if
  215                      | identifier TWO_POINTS . statement_no_short_if
  216                      | . IF OPEN_PAREN expression CLOSE_PAREN statement_no_short_if ELSE statement_no_short_if
  217                      | . WHILE OPEN_PAREN expression CLOSE_PAREN statement_no_short_if
  218                      | . FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement_no_short_if

    BEG         shift, and go to state 44
    PT_VIRGULA  shift, and go to state 56
    INCREMENT   shift, and go to state 57
    DECREMENT   shift, and go to state 58
    FOR         shift, and go to state 328
    IF          shift, and go to state 329
    WHILE       shift, and go to state 330
    SWITCH      shift, and go to state 62
    DO          shift, and go to state 63
    BREAK       shift, and go to state 64
    CONTINUE    shift, and go to state 65
    GOTO        shift, and go to state 66
    RETURN      shift, and go to state 67
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                               go to state 331
    block                                    go to state 70
    field_access                             go to state 77
    array_access                             go to state 78
    primary_no_new_array                     go to state 79
    postfix_expression                       go to state 80
    statement                                go to state 236
    statement_expression                     go to state 82
    preincrement_expression                  go to state 83
    post_incr_decrement_expression           go to state 84
    predecrement_expression                  go to state 85
    method_invocation                        go to state 86
    statement_without_trailing_substatement  go to state 334
    empty_statement                          go to state 88
    expression_statement                     go to state 89
    switch_statement                         go to state 90
    do_statement                             go to state 91
    break_statement                          go to state 92
    continue_statement                       go to state 93
    goto_statement                           go to state 94
    return_statement                         go to state 95
    statement_no_short_if                    go to state 420


state 394

    3 identifier: . ID
    7 block: . BEG block_statements END
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  151 postfix_expression: . primary_no_new_array postfix_expression_
  155 statement: . statement_without_trailing_substatement
  156          | . identifier TWO_POINTS statement
  157          | . IF OPEN_PAREN expression CLOSE_PAREN optional_else
  158          | . WHILE OPEN_PAREN expression CLOSE_PAREN statement
  159          | . FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement
  161 optional_else: statement_no_short_if ELSE . statement
  168 statement_expression: . primary_no_new_array assignment_operator assignment_expression
  169                     | . preincrement_expression
  170                     | . post_incr_decrement_expression
  171                     | . predecrement_expression
  172 preincrement_expression: . INCREMENT unary_expression
  173 post_incr_decrement_expression: . postfix_expression
  174 predecrement_expression: . DECREMENT unary_expression
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  183 statement_without_trailing_substatement: . block
  184                                        | . empty_statement
  185                                        | . expression_statement
  186                                        | . switch_statement
  187                                        | . do_statement
  188                                        | . break_statement
  189                                        | . continue_statement
  190                                        | . goto_statement
  191                                        | . return_statement
  192 empty_statement: . PT_VIRGULA
  193 expression_statement: . statement_expression PT_VIRGULA
  194 switch_statement: . SWITCH OPEN_PAREN expression CLOSE_PAREN switch_block
  207 do_statement: . DO statement WHILE OPEN_PAREN expression CLOSE_PAREN PT_VIRGULA
  208 break_statement: . BREAK identifier_opt PT_VIRGULA
  209 continue_statement: . CONTINUE identifier_opt PT_VIRGULA
  210 goto_statement: . GOTO identifier_opt PT_VIRGULA
  211 return_statement: . RETURN expression_opt PT_VIRGULA

    BEG         shift, and go to state 44
    PT_VIRGULA  shift, and go to state 56
    INCREMENT   shift, and go to state 57
    DECREMENT   shift, and go to state 58
    FOR         shift, and go to state 59
    IF          shift, and go to state 60
    WHILE       shift, and go to state 61
    SWITCH      shift, and go to state 62
    DO          shift, and go to state 63
    BREAK       shift, and go to state 64
    CONTINUE    shift, and go to state 65
    GOTO        shift, and go to state 66
    RETURN      shift, and go to state 67
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                               go to state 69
    block                                    go to state 70
    field_access                             go to state 77
    array_access                             go to state 78
    primary_no_new_array                     go to state 79
    postfix_expression                       go to state 80
    statement                                go to state 421
    statement_expression                     go to state 82
    preincrement_expression                  go to state 83
    post_incr_decrement_expression           go to state 84
    predecrement_expression                  go to state 85
    method_invocation                        go to state 86
    statement_without_trailing_substatement  go to state 87
    empty_statement                          go to state 88
    expression_statement                     go to state 89
    switch_statement                         go to state 90
    do_statement                             go to state 91
    break_statement                          go to state 92
    continue_statement                       go to state 93
    goto_statement                           go to state 94
    return_statement                         go to state 95


state 395

    3 identifier: . ID
   49 expression: . assignment_expression
   50 assignment_expression: . conditional_expression
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  205 switch_label: CASE . expression TWO_POINTS

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    expression                  go to state 422
    assignment_expression       go to state 127
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 128
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 396

  206 switch_label: DEFAULT . TWO_POINTS

    TWO_POINTS  shift, and go to state 423


state 397

  195 switch_block: BEG switch_block_statement_groups . switch_labels END
  201 switch_labels: . switch_label switch_labels_
  202              | . switch_labels_
  203 switch_labels_: . switch_label switch_labels_
  204               | .  [END]
  205 switch_label: . CASE expression TWO_POINTS
  206             | . DEFAULT TWO_POINTS

    CASE     shift, and go to state 395
    DEFAULT  shift, and go to state 396

    $default  reduce using rule 204 (switch_labels_)

    switch_labels   go to state 424
    switch_labels_  go to state 401
    switch_label    go to state 402


state 398

  197 switch_block_statement_groups: switch_block_statement_groups_ .

    $default  reduce using rule 197 (switch_block_statement_groups)


state 399

  196 switch_block_statement_groups: switch_block_statement_group . switch_block_statement_groups_
  198 switch_block_statement_groups_: . switch_block_statement_group switch_block_statement_groups_
  198                               | switch_block_statement_group . switch_block_statement_groups_
  199                               | .  [END, CASE, DEFAULT]
  200 switch_block_statement_group: . switch_labels block_statements
  201 switch_labels: . switch_label switch_labels_
  202              | . switch_labels_
  203 switch_labels_: . switch_label switch_labels_
  204               | .  [BEG, END, PT_VIRGULA, INCREMENT, DECREMENT, FOR, IF, WHILE, CASE, SWITCH, DEFAULT, DO, BREAK, CONTINUE, GOTO, RETURN, TYPE_INT, TYPE_SHORT, TYPE_LONG, TYPE_BYTE, TYPE_BOOL, TYPE_FLOAT, TYPE_DOUBLE, TYPE_CHAR, TYPE_STRING, ID, LITERAL]
  205 switch_label: . CASE expression TWO_POINTS
  206             | . DEFAULT TWO_POINTS

    CASE     shift, and go to state 395
    DEFAULT  shift, and go to state 396

    END       reduce using rule 199 (switch_block_statement_groups_)
    END       [reduce using rule 204 (switch_labels_)]
    CASE      [reduce using rule 199 (switch_block_statement_groups_)]
    CASE      [reduce using rule 204 (switch_labels_)]
    DEFAULT   [reduce using rule 199 (switch_block_statement_groups_)]
    DEFAULT   [reduce using rule 204 (switch_labels_)]
    $default  reduce using rule 204 (switch_labels_)

    switch_block_statement_groups_  go to state 425
    switch_block_statement_group    go to state 426
    switch_labels                   go to state 400
    switch_labels_                  go to state 401
    switch_label                    go to state 402


state 400

    3 identifier: . ID
    7 block: . BEG block_statements END
    8 block_statements: . block_statement block_statements_
    9                 | . block_statements_
   10 block_statements_: . block_statement block_statements_
   11                  | .  [BEG, END, PT_VIRGULA, INCREMENT, DECREMENT, FOR, IF, WHILE, CASE, SWITCH, DEFAULT, DO, BREAK, CONTINUE, GOTO, RETURN, TYPE_INT, TYPE_SHORT, TYPE_LONG, TYPE_BYTE, TYPE_BOOL, TYPE_FLOAT, TYPE_DOUBLE, TYPE_CHAR, TYPE_STRING, ID, LITERAL]
   12 block_statement: . local_variable_declaration_statement
   13                | . statement
   14 local_variable_declaration_statement: . local_variable_declaration PT_VIRGULA local_variable_declaration_
   17 local_variable_declaration: . primitive_type variable_declarators
   18                           | . primitive_type OPEN_COLC CLOSE_COLC variable_declarators
   19 primitive_type: . numeric_type
   20               | . TYPE_BOOL
   21               | . TYPE_STRING
   22 numeric_type: . integral_type
   23             | . floating_point_type
   24 integral_type: . TYPE_BYTE
   25              | . TYPE_SHORT
   26              | . TYPE_INT
   27              | . TYPE_LONG
   28              | . TYPE_CHAR
   29 floating_point_type: . TYPE_FLOAT
   30                    | . TYPE_DOUBLE
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  151 postfix_expression: . primary_no_new_array postfix_expression_
  155 statement: . statement_without_trailing_substatement
  156          | . identifier TWO_POINTS statement
  157          | . IF OPEN_PAREN expression CLOSE_PAREN optional_else
  158          | . WHILE OPEN_PAREN expression CLOSE_PAREN statement
  159          | . FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement
  168 statement_expression: . primary_no_new_array assignment_operator assignment_expression
  169                     | . preincrement_expression
  170                     | . post_incr_decrement_expression
  171                     | . predecrement_expression
  172 preincrement_expression: . INCREMENT unary_expression
  173 post_incr_decrement_expression: . postfix_expression
  174 predecrement_expression: . DECREMENT unary_expression
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  183 statement_without_trailing_substatement: . block
  184                                        | . empty_statement
  185                                        | . expression_statement
  186                                        | . switch_statement
  187                                        | . do_statement
  188                                        | . break_statement
  189                                        | . continue_statement
  190                                        | . goto_statement
  191                                        | . return_statement
  192 empty_statement: . PT_VIRGULA
  193 expression_statement: . statement_expression PT_VIRGULA
  194 switch_statement: . SWITCH OPEN_PAREN expression CLOSE_PAREN switch_block
  200 switch_block_statement_group: switch_labels . block_statements
  207 do_statement: . DO statement WHILE OPEN_PAREN expression CLOSE_PAREN PT_VIRGULA
  208 break_statement: . BREAK identifier_opt PT_VIRGULA
  209 continue_statement: . CONTINUE identifier_opt PT_VIRGULA
  210 goto_statement: . GOTO identifier_opt PT_VIRGULA
  211 return_statement: . RETURN expression_opt PT_VIRGULA

    BEG          shift, and go to state 44
    PT_VIRGULA   shift, and go to state 56
    INCREMENT    shift, and go to state 57
    DECREMENT    shift, and go to state 58
    FOR          shift, and go to state 59
    IF           shift, and go to state 60
    WHILE        shift, and go to state 61
    SWITCH       shift, and go to state 62
    DO           shift, and go to state 63
    BREAK        shift, and go to state 64
    CONTINUE     shift, and go to state 65
    GOTO         shift, and go to state 66
    RETURN       shift, and go to state 67
    TYPE_INT     shift, and go to state 14
    TYPE_SHORT   shift, and go to state 15
    TYPE_LONG    shift, and go to state 16
    TYPE_BYTE    shift, and go to state 17
    TYPE_BOOL    shift, and go to state 18
    TYPE_FLOAT   shift, and go to state 19
    TYPE_DOUBLE  shift, and go to state 20
    TYPE_CHAR    shift, and go to state 21
    TYPE_STRING  shift, and go to state 22
    ID           shift, and go to state 4
    LITERAL      shift, and go to state 68

    BEG          [reduce using rule 11 (block_statements_)]
    PT_VIRGULA   [reduce using rule 11 (block_statements_)]
    INCREMENT    [reduce using rule 11 (block_statements_)]
    DECREMENT    [reduce using rule 11 (block_statements_)]
    FOR          [reduce using rule 11 (block_statements_)]
    IF           [reduce using rule 11 (block_statements_)]
    WHILE        [reduce using rule 11 (block_statements_)]
    SWITCH       [reduce using rule 11 (block_statements_)]
    DO           [reduce using rule 11 (block_statements_)]
    BREAK        [reduce using rule 11 (block_statements_)]
    CONTINUE     [reduce using rule 11 (block_statements_)]
    GOTO         [reduce using rule 11 (block_statements_)]
    RETURN       [reduce using rule 11 (block_statements_)]
    TYPE_INT     [reduce using rule 11 (block_statements_)]
    TYPE_SHORT   [reduce using rule 11 (block_statements_)]
    TYPE_LONG    [reduce using rule 11 (block_statements_)]
    TYPE_BYTE    [reduce using rule 11 (block_statements_)]
    TYPE_BOOL    [reduce using rule 11 (block_statements_)]
    TYPE_FLOAT   [reduce using rule 11 (block_statements_)]
    TYPE_DOUBLE  [reduce using rule 11 (block_statements_)]
    TYPE_CHAR    [reduce using rule 11 (block_statements_)]
    TYPE_STRING  [reduce using rule 11 (block_statements_)]
    ID           [reduce using rule 11 (block_statements_)]
    LITERAL      [reduce using rule 11 (block_statements_)]
    $default     reduce using rule 11 (block_statements_)

    identifier                               go to state 69
    block                                    go to state 70
    block_statements                         go to state 427
    block_statements_                        go to state 72
    block_statement                          go to state 73
    local_variable_declaration_statement     go to state 74
    local_variable_declaration               go to state 75
    primitive_type                           go to state 76
    numeric_type                             go to state 27
    integral_type                            go to state 28
    floating_point_type                      go to state 29
    field_access                             go to state 77
    array_access                             go to state 78
    primary_no_new_array                     go to state 79
    postfix_expression                       go to state 80
    statement                                go to state 81
    statement_expression                     go to state 82
    preincrement_expression                  go to state 83
    post_incr_decrement_expression           go to state 84
    predecrement_expression                  go to state 85
    method_invocation                        go to state 86
    statement_without_trailing_substatement  go to state 87
    empty_statement                          go to state 88
    expression_statement                     go to state 89
    switch_statement                         go to state 90
    do_statement                             go to state 91
    break_statement                          go to state 92
    continue_statement                       go to state 93
    goto_statement                           go to state 94
    return_statement                         go to state 95


state 401

  202 switch_labels: switch_labels_ .

    $default  reduce using rule 202 (switch_labels)


state 402

  201 switch_labels: switch_label . switch_labels_
  203 switch_labels_: . switch_label switch_labels_
  203               | switch_label . switch_labels_
  204               | .  [BEG, END, PT_VIRGULA, INCREMENT, DECREMENT, FOR, IF, WHILE, CASE, SWITCH, DEFAULT, DO, BREAK, CONTINUE, GOTO, RETURN, TYPE_INT, TYPE_SHORT, TYPE_LONG, TYPE_BYTE, TYPE_BOOL, TYPE_FLOAT, TYPE_DOUBLE, TYPE_CHAR, TYPE_STRING, ID, LITERAL]
  205 switch_label: . CASE expression TWO_POINTS
  206             | . DEFAULT TWO_POINTS

    CASE     shift, and go to state 395
    DEFAULT  shift, and go to state 396

    CASE      [reduce using rule 204 (switch_labels_)]
    DEFAULT   [reduce using rule 204 (switch_labels_)]
    $default  reduce using rule 204 (switch_labels_)

    switch_labels_  go to state 428
    switch_label    go to state 429


state 403

  207 do_statement: DO statement WHILE OPEN_PAREN expression CLOSE_PAREN . PT_VIRGULA

    PT_VIRGULA  shift, and go to state 430


state 404

   77 conditional_expression: OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression . TWO_POINTS conditional_expression

    TWO_POINTS  shift, and go to state 431


state 405

   76 conditional_expression: conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression .

    $default  reduce using rule 76 (conditional_expression)


state 406

  177 method_invocation: LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN .

    $default  reduce using rule 177 (method_invocation)


state 407

   47 variable_initializers_: VIRGULA variable_initializer variable_initializers_ .

    $default  reduce using rule 47 (variable_initializers_)


state 408

   41 array_initializer: BEG variable_initializers virgula_opt END .

    $default  reduce using rule 41 (array_initializer)


state 409

   70 dim_expr_or_empty: expression .

    $default  reduce using rule 70 (dim_expr_or_empty)


state 410

   69 dim_exprs: OPEN_COLC dim_expr_or_empty . CLOSE_COLC

    CLOSE_COLC  shift, and go to state 432


state 411

   72 dims: dim_exprs .

    $default  reduce using rule 72 (dims)


state 412

   68 array_creation_expression: NEW primitive_type dim_exprs dims .

    $default  reduce using rule 68 (array_creation_expression)


state 413

    6 static_initializer: PUBLIC STATIC VOID MAIN OPEN_PAREN TYPE_STRING OPEN_COLC CLOSE_COLC . ARGS CLOSE_PAREN block

    ARGS  shift, and go to state 433


state 414

  180 for_update: statement_expression_list .

    $default  reduce using rule 180 (for_update)


state 415

  181 for_update_opt: for_update .

    $default  reduce using rule 181 (for_update_opt)


state 416

  159 statement: FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt . CLOSE_PAREN statement

    CLOSE_PAREN  shift, and go to state 434


state 417

  159 statement: FOR OPEN_PAREN for_init . PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement
  218 statement_no_short_if: FOR OPEN_PAREN for_init . PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement_no_short_if

    PT_VIRGULA  shift, and go to state 435


state 418

  157 statement: IF OPEN_PAREN expression . CLOSE_PAREN optional_else
  216 statement_no_short_if: IF OPEN_PAREN expression . CLOSE_PAREN statement_no_short_if ELSE statement_no_short_if

    CLOSE_PAREN  shift, and go to state 436


state 419

  158 statement: WHILE OPEN_PAREN expression . CLOSE_PAREN statement
  217 statement_no_short_if: WHILE OPEN_PAREN expression . CLOSE_PAREN statement_no_short_if

    CLOSE_PAREN  shift, and go to state 437


state 420

  215 statement_no_short_if: identifier TWO_POINTS statement_no_short_if .

    $default  reduce using rule 215 (statement_no_short_if)


state 421

  161 optional_else: statement_no_short_if ELSE statement .

    $default  reduce using rule 161 (optional_else)


state 422

  205 switch_label: CASE expression . TWO_POINTS

    TWO_POINTS  shift, and go to state 438


state 423

  206 switch_label: DEFAULT TWO_POINTS .

    $default  reduce using rule 206 (switch_label)


state 424

  195 switch_block: BEG switch_block_statement_groups switch_labels . END

    END  shift, and go to state 439


state 425

  196 switch_block_statement_groups: switch_block_statement_group switch_block_statement_groups_ .  [END, CASE, DEFAULT]
  198 switch_block_statement_groups_: switch_block_statement_group switch_block_statement_groups_ .  [END, CASE, DEFAULT]

    END       reduce using rule 196 (switch_block_statement_groups)
    END       [reduce using rule 198 (switch_block_statement_groups_)]
    CASE      reduce using rule 196 (switch_block_statement_groups)
    CASE      [reduce using rule 198 (switch_block_statement_groups_)]
    DEFAULT   reduce using rule 196 (switch_block_statement_groups)
    DEFAULT   [reduce using rule 198 (switch_block_statement_groups_)]
    $default  reduce using rule 196 (switch_block_statement_groups)


state 426

  198 switch_block_statement_groups_: . switch_block_statement_group switch_block_statement_groups_
  198                               | switch_block_statement_group . switch_block_statement_groups_
  199                               | .  [END, CASE, DEFAULT]
  200 switch_block_statement_group: . switch_labels block_statements
  201 switch_labels: . switch_label switch_labels_
  202              | . switch_labels_
  203 switch_labels_: . switch_label switch_labels_
  204               | .  [BEG, END, PT_VIRGULA, INCREMENT, DECREMENT, FOR, IF, WHILE, CASE, SWITCH, DEFAULT, DO, BREAK, CONTINUE, GOTO, RETURN, TYPE_INT, TYPE_SHORT, TYPE_LONG, TYPE_BYTE, TYPE_BOOL, TYPE_FLOAT, TYPE_DOUBLE, TYPE_CHAR, TYPE_STRING, ID, LITERAL]
  205 switch_label: . CASE expression TWO_POINTS
  206             | . DEFAULT TWO_POINTS

    CASE     shift, and go to state 395
    DEFAULT  shift, and go to state 396

    END       reduce using rule 199 (switch_block_statement_groups_)
    END       [reduce using rule 204 (switch_labels_)]
    CASE      [reduce using rule 199 (switch_block_statement_groups_)]
    CASE      [reduce using rule 204 (switch_labels_)]
    DEFAULT   [reduce using rule 199 (switch_block_statement_groups_)]
    DEFAULT   [reduce using rule 204 (switch_labels_)]
    $default  reduce using rule 204 (switch_labels_)

    switch_block_statement_groups_  go to state 440
    switch_block_statement_group    go to state 426
    switch_labels                   go to state 400
    switch_labels_                  go to state 401
    switch_label                    go to state 402


state 427

  200 switch_block_statement_group: switch_labels block_statements .

    $default  reduce using rule 200 (switch_block_statement_group)


state 428

  201 switch_labels: switch_label switch_labels_ .  [BEG, END, PT_VIRGULA, INCREMENT, DECREMENT, FOR, IF, WHILE, CASE, SWITCH, DEFAULT, DO, BREAK, CONTINUE, GOTO, RETURN, TYPE_INT, TYPE_SHORT, TYPE_LONG, TYPE_BYTE, TYPE_BOOL, TYPE_FLOAT, TYPE_DOUBLE, TYPE_CHAR, TYPE_STRING, ID, LITERAL]
  203 switch_labels_: switch_label switch_labels_ .  [BEG, END, PT_VIRGULA, INCREMENT, DECREMENT, FOR, IF, WHILE, CASE, SWITCH, DEFAULT, DO, BREAK, CONTINUE, GOTO, RETURN, TYPE_INT, TYPE_SHORT, TYPE_LONG, TYPE_BYTE, TYPE_BOOL, TYPE_FLOAT, TYPE_DOUBLE, TYPE_CHAR, TYPE_STRING, ID, LITERAL]

    BEG          reduce using rule 201 (switch_labels)
    BEG          [reduce using rule 203 (switch_labels_)]
    END          reduce using rule 201 (switch_labels)
    END          [reduce using rule 203 (switch_labels_)]
    PT_VIRGULA   reduce using rule 201 (switch_labels)
    PT_VIRGULA   [reduce using rule 203 (switch_labels_)]
    INCREMENT    reduce using rule 201 (switch_labels)
    INCREMENT    [reduce using rule 203 (switch_labels_)]
    DECREMENT    reduce using rule 201 (switch_labels)
    DECREMENT    [reduce using rule 203 (switch_labels_)]
    FOR          reduce using rule 201 (switch_labels)
    FOR          [reduce using rule 203 (switch_labels_)]
    IF           reduce using rule 201 (switch_labels)
    IF           [reduce using rule 203 (switch_labels_)]
    WHILE        reduce using rule 201 (switch_labels)
    WHILE        [reduce using rule 203 (switch_labels_)]
    CASE         reduce using rule 201 (switch_labels)
    CASE         [reduce using rule 203 (switch_labels_)]
    SWITCH       reduce using rule 201 (switch_labels)
    SWITCH       [reduce using rule 203 (switch_labels_)]
    DEFAULT      reduce using rule 201 (switch_labels)
    DEFAULT      [reduce using rule 203 (switch_labels_)]
    DO           reduce using rule 201 (switch_labels)
    DO           [reduce using rule 203 (switch_labels_)]
    BREAK        reduce using rule 201 (switch_labels)
    BREAK        [reduce using rule 203 (switch_labels_)]
    CONTINUE     reduce using rule 201 (switch_labels)
    CONTINUE     [reduce using rule 203 (switch_labels_)]
    GOTO         reduce using rule 201 (switch_labels)
    GOTO         [reduce using rule 203 (switch_labels_)]
    RETURN       reduce using rule 201 (switch_labels)
    RETURN       [reduce using rule 203 (switch_labels_)]
    TYPE_INT     reduce using rule 201 (switch_labels)
    TYPE_INT     [reduce using rule 203 (switch_labels_)]
    TYPE_SHORT   reduce using rule 201 (switch_labels)
    TYPE_SHORT   [reduce using rule 203 (switch_labels_)]
    TYPE_LONG    reduce using rule 201 (switch_labels)
    TYPE_LONG    [reduce using rule 203 (switch_labels_)]
    TYPE_BYTE    reduce using rule 201 (switch_labels)
    TYPE_BYTE    [reduce using rule 203 (switch_labels_)]
    TYPE_BOOL    reduce using rule 201 (switch_labels)
    TYPE_BOOL    [reduce using rule 203 (switch_labels_)]
    TYPE_FLOAT   reduce using rule 201 (switch_labels)
    TYPE_FLOAT   [reduce using rule 203 (switch_labels_)]
    TYPE_DOUBLE  reduce using rule 201 (switch_labels)
    TYPE_DOUBLE  [reduce using rule 203 (switch_labels_)]
    TYPE_CHAR    reduce using rule 201 (switch_labels)
    TYPE_CHAR    [reduce using rule 203 (switch_labels_)]
    TYPE_STRING  reduce using rule 201 (switch_labels)
    TYPE_STRING  [reduce using rule 203 (switch_labels_)]
    ID           reduce using rule 201 (switch_labels)
    ID           [reduce using rule 203 (switch_labels_)]
    LITERAL      reduce using rule 201 (switch_labels)
    LITERAL      [reduce using rule 203 (switch_labels_)]
    $default     reduce using rule 201 (switch_labels)


state 429

  203 switch_labels_: . switch_label switch_labels_
  203               | switch_label . switch_labels_
  204               | .  [BEG, END, PT_VIRGULA, INCREMENT, DECREMENT, FOR, IF, WHILE, CASE, SWITCH, DEFAULT, DO, BREAK, CONTINUE, GOTO, RETURN, TYPE_INT, TYPE_SHORT, TYPE_LONG, TYPE_BYTE, TYPE_BOOL, TYPE_FLOAT, TYPE_DOUBLE, TYPE_CHAR, TYPE_STRING, ID, LITERAL]
  205 switch_label: . CASE expression TWO_POINTS
  206             | . DEFAULT TWO_POINTS

    CASE     shift, and go to state 395
    DEFAULT  shift, and go to state 396

    CASE      [reduce using rule 204 (switch_labels_)]
    DEFAULT   [reduce using rule 204 (switch_labels_)]
    $default  reduce using rule 204 (switch_labels_)

    switch_labels_  go to state 441
    switch_label    go to state 429


state 430

  207 do_statement: DO statement WHILE OPEN_PAREN expression CLOSE_PAREN PT_VIRGULA .

    $default  reduce using rule 207 (do_statement)


state 431

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS . conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                  go to state 110
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 442
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86


state 432

   69 dim_exprs: OPEN_COLC dim_expr_or_empty CLOSE_COLC .

    $default  reduce using rule 69 (dim_exprs)


state 433

    6 static_initializer: PUBLIC STATIC VOID MAIN OPEN_PAREN TYPE_STRING OPEN_COLC CLOSE_COLC ARGS . CLOSE_PAREN block

    CLOSE_PAREN  shift, and go to state 443


state 434

    3 identifier: . ID
    7 block: . BEG block_statements END
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  151 postfix_expression: . primary_no_new_array postfix_expression_
  155 statement: . statement_without_trailing_substatement
  156          | . identifier TWO_POINTS statement
  157          | . IF OPEN_PAREN expression CLOSE_PAREN optional_else
  158          | . WHILE OPEN_PAREN expression CLOSE_PAREN statement
  159          | . FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement
  159          | FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN . statement
  168 statement_expression: . primary_no_new_array assignment_operator assignment_expression
  169                     | . preincrement_expression
  170                     | . post_incr_decrement_expression
  171                     | . predecrement_expression
  172 preincrement_expression: . INCREMENT unary_expression
  173 post_incr_decrement_expression: . postfix_expression
  174 predecrement_expression: . DECREMENT unary_expression
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  183 statement_without_trailing_substatement: . block
  184                                        | . empty_statement
  185                                        | . expression_statement
  186                                        | . switch_statement
  187                                        | . do_statement
  188                                        | . break_statement
  189                                        | . continue_statement
  190                                        | . goto_statement
  191                                        | . return_statement
  192 empty_statement: . PT_VIRGULA
  193 expression_statement: . statement_expression PT_VIRGULA
  194 switch_statement: . SWITCH OPEN_PAREN expression CLOSE_PAREN switch_block
  207 do_statement: . DO statement WHILE OPEN_PAREN expression CLOSE_PAREN PT_VIRGULA
  208 break_statement: . BREAK identifier_opt PT_VIRGULA
  209 continue_statement: . CONTINUE identifier_opt PT_VIRGULA
  210 goto_statement: . GOTO identifier_opt PT_VIRGULA
  211 return_statement: . RETURN expression_opt PT_VIRGULA

    BEG         shift, and go to state 44
    PT_VIRGULA  shift, and go to state 56
    INCREMENT   shift, and go to state 57
    DECREMENT   shift, and go to state 58
    FOR         shift, and go to state 59
    IF          shift, and go to state 60
    WHILE       shift, and go to state 61
    SWITCH      shift, and go to state 62
    DO          shift, and go to state 63
    BREAK       shift, and go to state 64
    CONTINUE    shift, and go to state 65
    GOTO        shift, and go to state 66
    RETURN      shift, and go to state 67
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                               go to state 69
    block                                    go to state 70
    field_access                             go to state 77
    array_access                             go to state 78
    primary_no_new_array                     go to state 79
    postfix_expression                       go to state 80
    statement                                go to state 444
    statement_expression                     go to state 82
    preincrement_expression                  go to state 83
    post_incr_decrement_expression           go to state 84
    predecrement_expression                  go to state 85
    method_invocation                        go to state 86
    statement_without_trailing_substatement  go to state 87
    empty_statement                          go to state 88
    expression_statement                     go to state 89
    switch_statement                         go to state 90
    do_statement                             go to state 91
    break_statement                          go to state 92
    continue_statement                       go to state 93
    goto_statement                           go to state 94
    return_statement                         go to state 95


state 435

    3 identifier: . ID
   49 expression: . assignment_expression
   50 assignment_expression: . conditional_expression
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
   74 conditional_expression: . conditional_or_expression
   75                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN conditional_opt
   76                       | . conditional_or_expression QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   77                       | . OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression
   89 conditional_or_expression: . conditional_and_expression conditional_or_expression_
   90                          | . conditional_and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   93 conditional_and_expression: . inclusive_or_expression conditional_and_expression_
   94                           | . inclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
   97 inclusive_or_expression: . exclusive_or_expression inclusive_or_expression_
   98                        | . exclusive_or_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  101 exclusive_or_expression: . and_expression exclusive_or_expression_
  102                        | . and_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  105 and_expression: . equality_expression and_expression_
  106               | . equality_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  109 equality_expression: . relational_expression equality_expression_
  110                    | . relational_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  113 relational_expression: . shift_expression relational_expression_
  114                      | . shift_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  117 shift_expression: . additive_expression shift_expression_
  118                 | . additive_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  121 additive_expression: . multiplicative_expression additive_expression_
  122                    | . multiplicative_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  126 multiplicative_expression: . unary_expression multiplicative_expression_
  127                          | . unary_expression OPEN_PAREN conditional_expression CLOSE_PAREN
  132 unary_expression: . INCREMENT unary_expression
  133                 | . DECREMENT unary_expression
  134                 | . PLUS unary_expression
  135                 | . MINUS unary_expression
  136                 | . postfix_expression
  137                 | . NOT unary_expression
  138                 | . NOT_BIT unary_expression
  139                 | . cast_expression
  140                 | . OPEN_PAREN conditional_expression CLOSE_PAREN
  141 cast_expression: . OPEN_PAREN primitive_type CLOSE_PAREN unary_expression
  142                | . OPEN_PAREN reference_type CLOSE_PAREN unary_expression_not_plus_minus
  151 postfix_expression: . primary_no_new_array postfix_expression_
  159 statement: FOR OPEN_PAREN for_init PT_VIRGULA . expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  178 expression_opt: . expression
  179               | .  [PT_VIRGULA]
  218 statement_no_short_if: FOR OPEN_PAREN for_init PT_VIRGULA . expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement_no_short_if

    OPEN_PAREN  shift, and go to state 125
    PLUS        shift, and go to state 104
    MINUS       shift, and go to state 105
    INCREMENT   shift, and go to state 106
    DECREMENT   shift, and go to state 107
    NOT         shift, and go to state 108
    NOT_BIT     shift, and go to state 109
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    $default  reduce using rule 179 (expression_opt)

    identifier                  go to state 110
    expression                  go to state 126
    assignment_expression       go to state 127
    field_access                go to state 77
    array_access                go to state 78
    primary_no_new_array        go to state 111
    conditional_expression      go to state 128
    conditional_or_expression   go to state 129
    conditional_and_expression  go to state 130
    inclusive_or_expression     go to state 131
    exclusive_or_expression     go to state 132
    and_expression              go to state 133
    equality_expression         go to state 134
    relational_expression       go to state 135
    shift_expression            go to state 136
    additive_expression         go to state 137
    multiplicative_expression   go to state 138
    unary_expression            go to state 139
    cast_expression             go to state 113
    postfix_expression          go to state 114
    method_invocation           go to state 86
    expression_opt              go to state 445


state 436

    3 identifier: . ID
    7 block: . BEG block_statements END
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  151 postfix_expression: . primary_no_new_array postfix_expression_
  155 statement: . statement_without_trailing_substatement
  156          | . identifier TWO_POINTS statement
  157          | . IF OPEN_PAREN expression CLOSE_PAREN optional_else
  157          | IF OPEN_PAREN expression CLOSE_PAREN . optional_else
  158          | . WHILE OPEN_PAREN expression CLOSE_PAREN statement
  159          | . FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement
  160 optional_else: . statement
  161              | . statement_no_short_if ELSE statement
  168 statement_expression: . primary_no_new_array assignment_operator assignment_expression
  169                     | . preincrement_expression
  170                     | . post_incr_decrement_expression
  171                     | . predecrement_expression
  172 preincrement_expression: . INCREMENT unary_expression
  173 post_incr_decrement_expression: . postfix_expression
  174 predecrement_expression: . DECREMENT unary_expression
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  183 statement_without_trailing_substatement: . block
  184                                        | . empty_statement
  185                                        | . expression_statement
  186                                        | . switch_statement
  187                                        | . do_statement
  188                                        | . break_statement
  189                                        | . continue_statement
  190                                        | . goto_statement
  191                                        | . return_statement
  192 empty_statement: . PT_VIRGULA
  193 expression_statement: . statement_expression PT_VIRGULA
  194 switch_statement: . SWITCH OPEN_PAREN expression CLOSE_PAREN switch_block
  207 do_statement: . DO statement WHILE OPEN_PAREN expression CLOSE_PAREN PT_VIRGULA
  208 break_statement: . BREAK identifier_opt PT_VIRGULA
  209 continue_statement: . CONTINUE identifier_opt PT_VIRGULA
  210 goto_statement: . GOTO identifier_opt PT_VIRGULA
  211 return_statement: . RETURN expression_opt PT_VIRGULA
  214 statement_no_short_if: . statement_without_trailing_substatement
  215                      | . identifier TWO_POINTS statement_no_short_if
  216                      | . IF OPEN_PAREN expression CLOSE_PAREN statement_no_short_if ELSE statement_no_short_if
  216                      | IF OPEN_PAREN expression CLOSE_PAREN . statement_no_short_if ELSE statement_no_short_if
  217                      | . WHILE OPEN_PAREN expression CLOSE_PAREN statement_no_short_if
  218                      | . FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement_no_short_if

    BEG         shift, and go to state 44
    PT_VIRGULA  shift, and go to state 56
    INCREMENT   shift, and go to state 57
    DECREMENT   shift, and go to state 58
    FOR         shift, and go to state 328
    IF          shift, and go to state 329
    WHILE       shift, and go to state 330
    SWITCH      shift, and go to state 62
    DO          shift, and go to state 63
    BREAK       shift, and go to state 64
    CONTINUE    shift, and go to state 65
    GOTO        shift, and go to state 66
    RETURN      shift, and go to state 67
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                               go to state 331
    block                                    go to state 70
    field_access                             go to state 77
    array_access                             go to state 78
    primary_no_new_array                     go to state 79
    postfix_expression                       go to state 80
    statement                                go to state 332
    optional_else                            go to state 333
    statement_expression                     go to state 82
    preincrement_expression                  go to state 83
    post_incr_decrement_expression           go to state 84
    predecrement_expression                  go to state 85
    method_invocation                        go to state 86
    statement_without_trailing_substatement  go to state 334
    empty_statement                          go to state 88
    expression_statement                     go to state 89
    switch_statement                         go to state 90
    do_statement                             go to state 91
    break_statement                          go to state 92
    continue_statement                       go to state 93
    goto_statement                           go to state 94
    return_statement                         go to state 95
    statement_no_short_if                    go to state 446


state 437

    3 identifier: . ID
    7 block: . BEG block_statements END
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  151 postfix_expression: . primary_no_new_array postfix_expression_
  155 statement: . statement_without_trailing_substatement
  156          | . identifier TWO_POINTS statement
  157          | . IF OPEN_PAREN expression CLOSE_PAREN optional_else
  158          | . WHILE OPEN_PAREN expression CLOSE_PAREN statement
  158          | WHILE OPEN_PAREN expression CLOSE_PAREN . statement
  159          | . FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement
  168 statement_expression: . primary_no_new_array assignment_operator assignment_expression
  169                     | . preincrement_expression
  170                     | . post_incr_decrement_expression
  171                     | . predecrement_expression
  172 preincrement_expression: . INCREMENT unary_expression
  173 post_incr_decrement_expression: . postfix_expression
  174 predecrement_expression: . DECREMENT unary_expression
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  183 statement_without_trailing_substatement: . block
  184                                        | . empty_statement
  185                                        | . expression_statement
  186                                        | . switch_statement
  187                                        | . do_statement
  188                                        | . break_statement
  189                                        | . continue_statement
  190                                        | . goto_statement
  191                                        | . return_statement
  192 empty_statement: . PT_VIRGULA
  193 expression_statement: . statement_expression PT_VIRGULA
  194 switch_statement: . SWITCH OPEN_PAREN expression CLOSE_PAREN switch_block
  207 do_statement: . DO statement WHILE OPEN_PAREN expression CLOSE_PAREN PT_VIRGULA
  208 break_statement: . BREAK identifier_opt PT_VIRGULA
  209 continue_statement: . CONTINUE identifier_opt PT_VIRGULA
  210 goto_statement: . GOTO identifier_opt PT_VIRGULA
  211 return_statement: . RETURN expression_opt PT_VIRGULA
  214 statement_no_short_if: . statement_without_trailing_substatement
  215                      | . identifier TWO_POINTS statement_no_short_if
  216                      | . IF OPEN_PAREN expression CLOSE_PAREN statement_no_short_if ELSE statement_no_short_if
  217                      | . WHILE OPEN_PAREN expression CLOSE_PAREN statement_no_short_if
  217                      | WHILE OPEN_PAREN expression CLOSE_PAREN . statement_no_short_if
  218                      | . FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement_no_short_if

    BEG         shift, and go to state 44
    PT_VIRGULA  shift, and go to state 56
    INCREMENT   shift, and go to state 57
    DECREMENT   shift, and go to state 58
    FOR         shift, and go to state 328
    IF          shift, and go to state 329
    WHILE       shift, and go to state 330
    SWITCH      shift, and go to state 62
    DO          shift, and go to state 63
    BREAK       shift, and go to state 64
    CONTINUE    shift, and go to state 65
    GOTO        shift, and go to state 66
    RETURN      shift, and go to state 67
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                               go to state 331
    block                                    go to state 70
    field_access                             go to state 77
    array_access                             go to state 78
    primary_no_new_array                     go to state 79
    postfix_expression                       go to state 80
    statement                                go to state 336
    statement_expression                     go to state 82
    preincrement_expression                  go to state 83
    post_incr_decrement_expression           go to state 84
    predecrement_expression                  go to state 85
    method_invocation                        go to state 86
    statement_without_trailing_substatement  go to state 334
    empty_statement                          go to state 88
    expression_statement                     go to state 89
    switch_statement                         go to state 90
    do_statement                             go to state 91
    break_statement                          go to state 92
    continue_statement                       go to state 93
    goto_statement                           go to state 94
    return_statement                         go to state 95
    statement_no_short_if                    go to state 447


state 438

  205 switch_label: CASE expression TWO_POINTS .

    $default  reduce using rule 205 (switch_label)


state 439

  195 switch_block: BEG switch_block_statement_groups switch_labels END .

    $default  reduce using rule 195 (switch_block)


state 440

  198 switch_block_statement_groups_: switch_block_statement_group switch_block_statement_groups_ .

    $default  reduce using rule 198 (switch_block_statement_groups_)


state 441

  203 switch_labels_: switch_label switch_labels_ .

    $default  reduce using rule 203 (switch_labels_)


state 442

   77 conditional_expression: OPEN_PAREN conditional_or_expression CLOSE_PAREN QUESTION_MARK conditional_expression TWO_POINTS conditional_expression .

    $default  reduce using rule 77 (conditional_expression)


state 443

    6 static_initializer: PUBLIC STATIC VOID MAIN OPEN_PAREN TYPE_STRING OPEN_COLC CLOSE_COLC ARGS CLOSE_PAREN . block
    7 block: . BEG block_statements END

    BEG  shift, and go to state 44

    block  go to state 448


state 444

  159 statement: FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement .

    $default  reduce using rule 159 (statement)


state 445

  159 statement: FOR OPEN_PAREN for_init PT_VIRGULA expression_opt . PT_VIRGULA for_update_opt CLOSE_PAREN statement
  218 statement_no_short_if: FOR OPEN_PAREN for_init PT_VIRGULA expression_opt . PT_VIRGULA for_update_opt CLOSE_PAREN statement_no_short_if

    PT_VIRGULA  shift, and go to state 449


state 446

  161 optional_else: statement_no_short_if . ELSE statement
  216 statement_no_short_if: IF OPEN_PAREN expression CLOSE_PAREN statement_no_short_if . ELSE statement_no_short_if

    ELSE  shift, and go to state 450


state 447

  217 statement_no_short_if: WHILE OPEN_PAREN expression CLOSE_PAREN statement_no_short_if .

    $default  reduce using rule 217 (statement_no_short_if)


state 448

    6 static_initializer: PUBLIC STATIC VOID MAIN OPEN_PAREN TYPE_STRING OPEN_COLC CLOSE_COLC ARGS CLOSE_PAREN block .

    $default  reduce using rule 6 (static_initializer)


state 449

    3 identifier: . ID
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  151 postfix_expression: . primary_no_new_array postfix_expression_
  159 statement: FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA . for_update_opt CLOSE_PAREN statement
  165 statement_expression_list: . statement_expression statement_expression_list_
  168 statement_expression: . primary_no_new_array assignment_operator assignment_expression
  169                     | . preincrement_expression
  170                     | . post_incr_decrement_expression
  171                     | . predecrement_expression
  172 preincrement_expression: . INCREMENT unary_expression
  173 post_incr_decrement_expression: . postfix_expression
  174 predecrement_expression: . DECREMENT unary_expression
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  180 for_update: . statement_expression_list
  181 for_update_opt: . for_update
  182               | .  [CLOSE_PAREN]
  218 statement_no_short_if: FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA . for_update_opt CLOSE_PAREN statement_no_short_if

    INCREMENT  shift, and go to state 57
    DECREMENT  shift, and go to state 58
    ID         shift, and go to state 4
    LITERAL    shift, and go to state 68

    $default  reduce using rule 182 (for_update_opt)

    identifier                      go to state 110
    field_access                    go to state 77
    array_access                    go to state 78
    primary_no_new_array            go to state 79
    postfix_expression              go to state 80
    statement_expression_list       go to state 414
    statement_expression            go to state 190
    preincrement_expression         go to state 83
    post_incr_decrement_expression  go to state 84
    predecrement_expression         go to state 85
    method_invocation               go to state 86
    for_update                      go to state 415
    for_update_opt                  go to state 451


state 450

    3 identifier: . ID
    7 block: . BEG block_statements END
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  151 postfix_expression: . primary_no_new_array postfix_expression_
  155 statement: . statement_without_trailing_substatement
  156          | . identifier TWO_POINTS statement
  157          | . IF OPEN_PAREN expression CLOSE_PAREN optional_else
  158          | . WHILE OPEN_PAREN expression CLOSE_PAREN statement
  159          | . FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement
  161 optional_else: statement_no_short_if ELSE . statement
  168 statement_expression: . primary_no_new_array assignment_operator assignment_expression
  169                     | . preincrement_expression
  170                     | . post_incr_decrement_expression
  171                     | . predecrement_expression
  172 preincrement_expression: . INCREMENT unary_expression
  173 post_incr_decrement_expression: . postfix_expression
  174 predecrement_expression: . DECREMENT unary_expression
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  183 statement_without_trailing_substatement: . block
  184                                        | . empty_statement
  185                                        | . expression_statement
  186                                        | . switch_statement
  187                                        | . do_statement
  188                                        | . break_statement
  189                                        | . continue_statement
  190                                        | . goto_statement
  191                                        | . return_statement
  192 empty_statement: . PT_VIRGULA
  193 expression_statement: . statement_expression PT_VIRGULA
  194 switch_statement: . SWITCH OPEN_PAREN expression CLOSE_PAREN switch_block
  207 do_statement: . DO statement WHILE OPEN_PAREN expression CLOSE_PAREN PT_VIRGULA
  208 break_statement: . BREAK identifier_opt PT_VIRGULA
  209 continue_statement: . CONTINUE identifier_opt PT_VIRGULA
  210 goto_statement: . GOTO identifier_opt PT_VIRGULA
  211 return_statement: . RETURN expression_opt PT_VIRGULA
  214 statement_no_short_if: . statement_without_trailing_substatement
  215                      | . identifier TWO_POINTS statement_no_short_if
  216                      | . IF OPEN_PAREN expression CLOSE_PAREN statement_no_short_if ELSE statement_no_short_if
  216                      | IF OPEN_PAREN expression CLOSE_PAREN statement_no_short_if ELSE . statement_no_short_if
  217                      | . WHILE OPEN_PAREN expression CLOSE_PAREN statement_no_short_if
  218                      | . FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement_no_short_if

    BEG         shift, and go to state 44
    PT_VIRGULA  shift, and go to state 56
    INCREMENT   shift, and go to state 57
    DECREMENT   shift, and go to state 58
    FOR         shift, and go to state 328
    IF          shift, and go to state 329
    WHILE       shift, and go to state 330
    SWITCH      shift, and go to state 62
    DO          shift, and go to state 63
    BREAK       shift, and go to state 64
    CONTINUE    shift, and go to state 65
    GOTO        shift, and go to state 66
    RETURN      shift, and go to state 67
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                               go to state 331
    block                                    go to state 70
    field_access                             go to state 77
    array_access                             go to state 78
    primary_no_new_array                     go to state 79
    postfix_expression                       go to state 80
    statement                                go to state 421
    statement_expression                     go to state 82
    preincrement_expression                  go to state 83
    post_incr_decrement_expression           go to state 84
    predecrement_expression                  go to state 85
    method_invocation                        go to state 86
    statement_without_trailing_substatement  go to state 334
    empty_statement                          go to state 88
    expression_statement                     go to state 89
    switch_statement                         go to state 90
    do_statement                             go to state 91
    break_statement                          go to state 92
    continue_statement                       go to state 93
    goto_statement                           go to state 94
    return_statement                         go to state 95
    statement_no_short_if                    go to state 452


state 451

  159 statement: FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt . CLOSE_PAREN statement
  218 statement_no_short_if: FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt . CLOSE_PAREN statement_no_short_if

    CLOSE_PAREN  shift, and go to state 453


state 452

  216 statement_no_short_if: IF OPEN_PAREN expression CLOSE_PAREN statement_no_short_if ELSE statement_no_short_if .

    $default  reduce using rule 216 (statement_no_short_if)


state 453

    3 identifier: . ID
    7 block: . BEG block_statements END
   51 field_access: . identifier POINT identifier
   58 array_access: . primary_no_new_array OPEN_COLC expression CLOSE_COLC
   59 primary_no_new_array: . LITERAL
   60                     | . field_access
   61                     | . method_invocation
   62                     | . array_access
   63                     | . identifier
  151 postfix_expression: . primary_no_new_array postfix_expression_
  155 statement: . statement_without_trailing_substatement
  156          | . identifier TWO_POINTS statement
  157          | . IF OPEN_PAREN expression CLOSE_PAREN optional_else
  158          | . WHILE OPEN_PAREN expression CLOSE_PAREN statement
  159          | . FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement
  159          | FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN . statement
  168 statement_expression: . primary_no_new_array assignment_operator assignment_expression
  169                     | . preincrement_expression
  170                     | . post_incr_decrement_expression
  171                     | . predecrement_expression
  172 preincrement_expression: . INCREMENT unary_expression
  173 post_incr_decrement_expression: . postfix_expression
  174 predecrement_expression: . DECREMENT unary_expression
  175 method_invocation: . identifier OPEN_PAREN argument_list CLOSE_PAREN
  176                  | . field_access OPEN_PAREN argument_list CLOSE_PAREN
  177                  | . LITERAL POINT identifier OPEN_PAREN argument_list CLOSE_PAREN
  183 statement_without_trailing_substatement: . block
  184                                        | . empty_statement
  185                                        | . expression_statement
  186                                        | . switch_statement
  187                                        | . do_statement
  188                                        | . break_statement
  189                                        | . continue_statement
  190                                        | . goto_statement
  191                                        | . return_statement
  192 empty_statement: . PT_VIRGULA
  193 expression_statement: . statement_expression PT_VIRGULA
  194 switch_statement: . SWITCH OPEN_PAREN expression CLOSE_PAREN switch_block
  207 do_statement: . DO statement WHILE OPEN_PAREN expression CLOSE_PAREN PT_VIRGULA
  208 break_statement: . BREAK identifier_opt PT_VIRGULA
  209 continue_statement: . CONTINUE identifier_opt PT_VIRGULA
  210 goto_statement: . GOTO identifier_opt PT_VIRGULA
  211 return_statement: . RETURN expression_opt PT_VIRGULA
  214 statement_no_short_if: . statement_without_trailing_substatement
  215                      | . identifier TWO_POINTS statement_no_short_if
  216                      | . IF OPEN_PAREN expression CLOSE_PAREN statement_no_short_if ELSE statement_no_short_if
  217                      | . WHILE OPEN_PAREN expression CLOSE_PAREN statement_no_short_if
  218                      | . FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement_no_short_if
  218                      | FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN . statement_no_short_if

    BEG         shift, and go to state 44
    PT_VIRGULA  shift, and go to state 56
    INCREMENT   shift, and go to state 57
    DECREMENT   shift, and go to state 58
    FOR         shift, and go to state 328
    IF          shift, and go to state 329
    WHILE       shift, and go to state 330
    SWITCH      shift, and go to state 62
    DO          shift, and go to state 63
    BREAK       shift, and go to state 64
    CONTINUE    shift, and go to state 65
    GOTO        shift, and go to state 66
    RETURN      shift, and go to state 67
    ID          shift, and go to state 4
    LITERAL     shift, and go to state 68

    identifier                               go to state 331
    block                                    go to state 70
    field_access                             go to state 77
    array_access                             go to state 78
    primary_no_new_array                     go to state 79
    postfix_expression                       go to state 80
    statement                                go to state 444
    statement_expression                     go to state 82
    preincrement_expression                  go to state 83
    post_incr_decrement_expression           go to state 84
    predecrement_expression                  go to state 85
    method_invocation                        go to state 86
    statement_without_trailing_substatement  go to state 334
    empty_statement                          go to state 88
    expression_statement                     go to state 89
    switch_statement                         go to state 90
    do_statement                             go to state 91
    break_statement                          go to state 92
    continue_statement                       go to state 93
    goto_statement                           go to state 94
    return_statement                         go to state 95
    statement_no_short_if                    go to state 454


state 454

  218 statement_no_short_if: FOR OPEN_PAREN for_init PT_VIRGULA expression_opt PT_VIRGULA for_update_opt CLOSE_PAREN statement_no_short_if .

    $default  reduce using rule 218 (statement_no_short_if)
